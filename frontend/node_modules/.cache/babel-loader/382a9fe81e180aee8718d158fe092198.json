{"ast":null,"code":"import { Pass, RenderPass, DepthPass, Effect, Selection } from 'postprocessing';\nimport { ShaderMaterial, Uniform, Vector2, Matrix3, TangentSpaceNormalMap, GLSL3, Matrix4, Vector3, WebGLRenderTarget, LinearFilter, HalfFloatType, WebGLMultipleRenderTargets, ShaderChunk, Color, Quaternion, VideoTexture, DataTexture, RGBAFormat, FloatType, NearestFilter, FramebufferTexture, WebGLCubeRenderTarget, CubeCamera, PMREMGenerator, Texture } from 'three';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nvar boxBlur = \"#define GLSLIFY 1\\nuniform float blur;uniform float blurSharpness;uniform int blurKernel;vec3 denoise(vec3 center,sampler2D tex,vec2 uv,vec2 invTexSize,float blur,float blurSharpness,int blurKernel){vec3 color;float total;vec3 col;float weight;for(int x=-blurKernel;x<=blurKernel;x++){for(int y=-blurKernel;y<=blurKernel;y++){col=textureLod(tex,uv+vec2(x,y)*invTexSize,0.).rgb;weight=1.0-abs(dot(col-center,vec3(0.25)));weight=pow(weight,blurSharpness);color+=col*weight;total+=weight;}}return color/total;}\"; // eslint-disable-line\n\nvar finalSSRShader = \"#define GLSLIFY 1\\n#define MODE_DEFAULT 0\\n#define MODE_REFLECTIONS 1\\n#define MODE_RAW_REFLECTION 2\\n#define MODE_BLURRED_REFLECTIONS 3\\n#define MODE_INPUT 4\\n#define MODE_BLUR_MIX 5\\n#define FLOAT_EPSILON 0.00001\\nuniform sampler2D inputTexture;uniform sampler2D reflectionsTexture;uniform float samples;\\n#include <boxBlur>\\nvoid mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){vec4 reflectionsTexel=texture2D(reflectionsTexture,vUv);ivec2 size=textureSize(reflectionsTexture,0);vec2 invTexSize=1./vec2(size.x,size.y);vec3 reflectionClr=reflectionsTexel.xyz;if(blur>FLOAT_EPSILON){vec3 blurredReflectionsColor=denoise(reflectionsTexel.rgb,reflectionsTexture,vUv,invTexSize,blur,blurSharpness,blurKernel);reflectionClr=mix(reflectionClr,blurredReflectionsColor.rgb,blur);}\\n#if RENDER_MODE == MODE_DEFAULT\\noutputColor=vec4(inputColor.rgb+reflectionClr,1.0);\\n#endif\\n#if RENDER_MODE == MODE_REFLECTIONS\\noutputColor=vec4(reflectionClr,1.0);\\n#endif\\n#if RENDER_MODE == MODE_RAW_REFLECTION\\noutputColor=vec4(reflectionsTexel.xyz,1.0);\\n#endif\\n#if RENDER_MODE == MODE_BLURRED_REFLECTIONS\\noutputColor=vec4(blurredReflectionsTexel.xyz,1.0);\\n#endif\\n#if RENDER_MODE == MODE_INPUT\\noutputColor=vec4(inputColor.xyz,1.0);\\n#endif\\n#if RENDER_MODE == MODE_BLUR_MIX\\noutputColor=vec4(vec3(blur),1.0);\\n#endif\\n}\"; // eslint-disable-line\n\nvar helperFunctions = \"#define GLSLIFY 1\\nvec3 getViewPosition(const float depth){float clipW=_projectionMatrix[2][3]*depth+_projectionMatrix[3][3];vec4 clipPosition=vec4((vec3(vUv,depth)-0.5)*2.0,1.0);clipPosition*=clipW;return(_inverseProjectionMatrix*clipPosition).xyz;}float getViewZ(const in float depth){\\n#ifdef PERSPECTIVE_CAMERA\\nreturn perspectiveDepthToViewZ(depth,cameraNear,cameraFar);\\n#else\\nreturn orthographicDepthToViewZ(depth,cameraNear,cameraFar);\\n#endif\\n}vec3 screenSpaceToWorldSpace(const vec2 uv,const float depth){vec4 ndc=vec4((uv.x-0.5)*2.0,(uv.y-0.5)*2.0,(depth-0.5)*2.0,1.0);vec4 clip=_inverseProjectionMatrix*ndc;vec4 view=cameraMatrixWorld*(clip/clip.w);return view.xyz;}\\n#define Scale (vec3(0.8, 0.8, 0.8))\\n#define K (19.19)\\nvec3 hash(vec3 a){a=fract(a*Scale);a+=dot(a,a.yxz+K);return fract((a.xxy+a.yxx)*a.zyx);}float fresnel_dielectric_cos(float cosi,float eta){float c=abs(cosi);float g=eta*eta-1.0+c*c;float result;if(g>0.0){g=sqrt(g);float A=(g-c)/(g+c);float B=(c*(g+c)-1.0)/(c*(g-c)+1.0);result=0.5*A*A*(1.0+B*B);}else{result=1.0;}return result;}float fresnel_dielectric(vec3 Incoming,vec3 Normal,float eta){float cosine=dot(Incoming,Normal);return min(1.0,5.0*fresnel_dielectric_cos(cosine,eta));}\"; // eslint-disable-line\n\nvar trCompose = \"#define GLSLIFY 1\\n#define INV_EULER 0.36787944117144233\\nalpha=velocityDisocclusion<FLOAT_EPSILON ?(alpha+0.0075): 0.0;alpha=clamp(alpha,0.0,1.0);bool needsBlur=!didReproject||velocityDisocclusion>0.5;\\n#ifdef boxBlur\\nif(needsBlur)inputColor=boxBlurredColor;\\n#endif\\nif(alpha==1.0){outputColor=accumulatedColor;}else{float m=mix(alpha,1.0,blend);if(needsBlur)m=0.0;outputColor=accumulatedColor*m+inputColor*(1.0-m);}\"; // eslint-disable-line\n// WebGL2: will render normals to RGB channel of \"gNormal\" buffer, roughness to A channel of \"gNormal\" buffer, depth to RGBA channel of \"gDepth\" buffer\n// and velocity to \"gVelocity\" buffer\n\nclass MRTMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      type: \"MRTMaterial\",\n      defines: {\n        USE_UV: \"\",\n        TEMPORAL_RESOLVE: \"\"\n      },\n      uniforms: {\n        opacity: new Uniform(1),\n        normalMap: new Uniform(null),\n        normalScale: new Uniform(new Vector2(1, 1)),\n        uvTransform: new Uniform(new Matrix3()),\n        roughness: new Uniform(1),\n        roughnessMap: new Uniform(null)\n      },\n      vertexShader:\n      /* glsl */\n      `\n                #ifdef USE_MRT\n                 varying vec2 vHighPrecisionZW;\n                #endif\n                #define NORMAL\n                #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n                    varying vec3 vViewPosition;\n                #endif\n                #include <common>\n                #include <uv_pars_vertex>\n                #include <displacementmap_pars_vertex>\n                #include <normal_pars_vertex>\n                #include <morphtarget_pars_vertex>\n                #include <skinning_pars_vertex>\n                #include <logdepthbuf_pars_vertex>\n                #include <clipping_planes_pars_vertex>\n                void main() {\n                    #include <uv_vertex>\n                    #include <beginnormal_vertex>\n                    #include <morphnormal_vertex>\n                    #include <skinbase_vertex>\n                    #include <skinnormal_vertex>\n                    #include <defaultnormal_vertex>\n                    #include <normal_vertex>\n                    #include <begin_vertex>\n                    #include <morphtarget_vertex>\n                    #include <skinning_vertex>\n                    #include <displacementmap_vertex>\n                    #include <project_vertex>\n                    #include <logdepthbuf_vertex>\n                    #include <clipping_planes_vertex>\n                    #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n                        vViewPosition = - mvPosition.xyz;\n                    #endif\n                    #ifdef USE_MRT\n                        vHighPrecisionZW = gl_Position.zw;\n                    #endif \n                    #ifdef USE_UV\n                        vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n                    #endif\n                }\n            `,\n      fragmentShader:\n      /* glsl */\n      `\n                 #define NORMAL\n                #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n                    varying vec3 vViewPosition;\n                #endif\n                #include <packing>\n                #include <uv_pars_fragment>\n                #include <normal_pars_fragment>\n                #include <bumpmap_pars_fragment>\n                #include <normalmap_pars_fragment>\n                #include <logdepthbuf_pars_fragment>\n                #include <clipping_planes_pars_fragment>\n                #include <roughnessmap_pars_fragment>\n                \n                #ifdef USE_MRT\n                layout(location = 0) out vec4 gNormal;\n                layout(location = 1) out vec4 gDepth;\n                \n                varying vec2 vHighPrecisionZW;\n                #endif\n                uniform float roughness;\n                void main() {\n                    #include <clipping_planes_fragment>\n                    #include <logdepthbuf_fragment>\n                    #include <normal_fragment_begin>\n                    #include <normal_fragment_maps>\n\n                    float roughnessFactor = roughness;\n                    \n                    if(roughness > 10.0e9){\n                        roughnessFactor = 1.;\n                    }else{\n                        #ifdef useRoughnessMap\n                            vec4 texelRoughness = texture2D( roughnessMap, vUv );\n                            // reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n                            roughnessFactor *= texelRoughness.g;\n                        #endif\n                    }\n\n                    vec3 normalColor = packNormalToRGB( normal );\n                    #ifdef USE_MRT\n                        float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n                        vec4 depthColor = packDepthToRGBA( fragCoordZ );\n                        gNormal = vec4( normalColor, roughnessFactor );\n                        gDepth = depthColor;\n                    #else\n                        gl_FragColor = vec4(normalColor, roughnessFactor);\n                    #endif\n                }\n            `,\n      toneMapped: false\n    });\n    this.normalMapType = TangentSpaceNormalMap;\n    this.normalScale = new Vector2(1, 1);\n    Object.defineProperty(this, \"glslVersion\", {\n      get() {\n        return \"USE_MRT\" in this.defines ? GLSL3 : null;\n      },\n\n      set(_) {}\n\n    });\n  }\n\n}\n\nvar vertexShader$1 = \"#define GLSLIFY 1\\nvarying vec2 vUv;void main(){vUv=position.xy*0.5+0.5;gl_Position=vec4(position.xy,1.0,1.0);}\"; // eslint-disable-line\n\nvar fragmentShader = \"#define GLSLIFY 1\\nvarying vec2 vUv;uniform sampler2D inputTexture;uniform sampler2D accumulatedTexture;uniform sampler2D normalTexture;uniform sampler2D depthTexture;uniform sampler2D envMap;uniform mat4 _projectionMatrix;uniform mat4 _inverseProjectionMatrix;uniform mat4 cameraMatrixWorld;uniform float cameraNear;uniform float cameraFar;uniform float rayDistance;uniform float intensity;uniform float maxDepthDifference;uniform float roughnessFade;uniform float maxRoughness;uniform float fade;uniform float thickness;uniform float ior;uniform float samples;uniform float jitter;uniform float jitterRoughness;\\n#define INVALID_RAY_COORDS vec2(-1.0);\\n#define EARLY_OUT_COLOR vec4(0.0, 0.0, 0.0, 1.0)\\n#define FLOAT_EPSILON 0.00001\\nfloat nearMinusFar;float nearMulFar;float farMinusNear;\\n#include <packing>\\n#include <helperFunctions>\\nvec2 RayMarch(vec3 dir,inout vec3 hitPos,inout float rayHitDepthDifference);vec2 BinarySearch(in vec3 dir,inout vec3 hitPos,inout float rayHitDepthDifference);float fastGetViewZ(const in float depth);vec3 getIBLRadiance(const in vec3 viewDir,const in vec3 normal,const in float roughness);void main(){vec4 depthTexel=textureLod(depthTexture,vUv,0.0);if(dot(depthTexel.rgb,depthTexel.rgb)<FLOAT_EPSILON){gl_FragColor=EARLY_OUT_COLOR;return;}float unpackedDepth=unpackRGBAToDepth(depthTexel);vec4 normalTexel=textureLod(normalTexture,vUv,0.0);float roughness=normalTexel.a;float specular=1.0-roughness;nearMinusFar=cameraNear-cameraFar;nearMulFar=cameraNear*cameraFar;farMinusNear=cameraFar-cameraNear;normalTexel.rgb=unpackRGBToNormal(normalTexel.rgb);float depth=fastGetViewZ(unpackedDepth);vec3 viewPos=getViewPosition(depth);vec3 viewDir=normalize(viewPos);vec3 viewNormal=normalTexel.xyz;vec3 worldPos=screenSpaceToWorldSpace(vUv,unpackedDepth);vec3 jitt=vec3(0.0);if(jitterRoughness!=0.0||jitter!=0.0){vec3 randomJitter=hash(50.0*samples*worldPos)-0.5;float spread=((2.0-specular)+roughness*jitterRoughness);float jitterMix=jitter*0.25+jitterRoughness*roughness;if(jitterMix>1.0)jitterMix=1.0;jitt=mix(vec3(0.0),randomJitter*spread,jitterMix);}viewNormal+=jitt;float fresnelFactor=fresnel_dielectric(viewDir,viewNormal,ior);vec3 iblRadiance=getIBLRadiance(-viewDir,viewNormal,0.)*fresnelFactor;float lastFrameAlpha=textureLod(accumulatedTexture,vUv,0.0).a;if(roughness>maxRoughness||(roughness>1.0-FLOAT_EPSILON&&roughnessFade>1.0-FLOAT_EPSILON)){gl_FragColor=vec4(iblRadiance,lastFrameAlpha);return;}vec3 reflected=reflect(viewDir,viewNormal);vec3 rayDir=reflected*-viewPos.z;vec3 hitPos=viewPos;float rayHitDepthDifference;vec2 coords=RayMarch(rayDir,hitPos,rayHitDepthDifference);if(coords.x==-1.0){gl_FragColor=vec4(iblRadiance,lastFrameAlpha);return;}vec4 SSRTexel=textureLod(inputTexture,coords.xy,0.0);vec4 SSRTexelReflected=textureLod(accumulatedTexture,coords.xy,0.0);vec3 SSR=SSRTexel.rgb+SSRTexelReflected.rgb;float roughnessFactor=mix(specular,1.0,max(0.0,1.0-roughnessFade));vec2 coordsNDC=(coords.xy*2.0-1.0);float screenFade=0.1;float maxDimension=min(1.0,max(abs(coordsNDC.x),abs(coordsNDC.y)));float reflectionIntensity=1.0-(max(0.0,maxDimension-screenFade)/(1.0-screenFade));reflectionIntensity=max(0.,reflectionIntensity);vec3 finalSSR=mix(iblRadiance,SSR,reflectionIntensity)*roughnessFactor;if(fade!=0.0){vec3 hitWorldPos=screenSpaceToWorldSpace(coords,rayHitDepthDifference);float reflectionDistance=distance(hitWorldPos,worldPos)+1.0;float opacity=1.0/(reflectionDistance*fade*0.1);if(opacity>1.0)opacity=1.0;finalSSR*=opacity;}finalSSR*=fresnelFactor*intensity;finalSSR=min(vec3(1.0),finalSSR);float alpha=hitPos.z==1.0 ? 1.0 : SSRTexelReflected.a;alpha=min(lastFrameAlpha,alpha);gl_FragColor=vec4(finalSSR,alpha);}vec2 RayMarch(vec3 dir,inout vec3 hitPos,inout float rayHitDepthDifference){dir=normalize(dir);dir*=rayDistance/float(steps);float depth;vec4 projectedCoord;vec4 lastProjectedCoord;float unpackedDepth;vec4 depthTexel;for(int i=0;i<steps;i++){hitPos+=dir;projectedCoord=_projectionMatrix*vec4(hitPos,1.0);projectedCoord.xy/=projectedCoord.w;projectedCoord.xy=projectedCoord.xy*0.5+0.5;\\n#ifndef missedRays\\nif(projectedCoord.x<0.0||projectedCoord.x>1.0||projectedCoord.y<0.0||projectedCoord.y>1.0){return INVALID_RAY_COORDS;}\\n#endif\\ndepthTexel=textureLod(depthTexture,projectedCoord.xy,0.0);unpackedDepth=unpackRGBAToDepth(depthTexel);depth=fastGetViewZ(unpackedDepth);rayHitDepthDifference=depth-hitPos.z;if(rayHitDepthDifference>=0.0&&rayHitDepthDifference<thickness){\\n#if refineSteps == 0\\nif(dot(depthTexel.rgb,depthTexel.rgb)<FLOAT_EPSILON)return INVALID_RAY_COORDS;\\n#else\\nreturn BinarySearch(dir,hitPos,rayHitDepthDifference);\\n#endif\\n}\\n#ifndef missedRays\\nif(hitPos.z>0.0){return INVALID_RAY_COORDS;}\\n#endif\\nlastProjectedCoord=projectedCoord;}hitPos.z=1.0;\\n#ifndef missedRays\\nreturn INVALID_RAY_COORDS;\\n#endif\\nrayHitDepthDifference=unpackedDepth;return projectedCoord.xy;}vec2 BinarySearch(in vec3 dir,inout vec3 hitPos,inout float rayHitDepthDifference){float depth;vec4 projectedCoord;vec2 lastMinProjectedCoordXY;float unpackedDepth;vec4 depthTexel;for(int i=0;i<refineSteps;i++){projectedCoord=_projectionMatrix*vec4(hitPos,1.0);projectedCoord.xy/=projectedCoord.w;projectedCoord.xy=projectedCoord.xy*0.5+0.5;depthTexel=textureLod(depthTexture,projectedCoord.xy,0.0);unpackedDepth=unpackRGBAToDepth(depthTexel);depth=fastGetViewZ(unpackedDepth);rayHitDepthDifference=depth-hitPos.z;dir*=0.5;if(rayHitDepthDifference>0.0){hitPos-=dir;}else{hitPos+=dir;}}if(dot(depthTexel.rgb,depthTexel.rgb)<FLOAT_EPSILON)return INVALID_RAY_COORDS;if(abs(rayHitDepthDifference)>maxDepthDifference)return INVALID_RAY_COORDS;projectedCoord=_projectionMatrix*vec4(hitPos,1.0);projectedCoord.xy/=projectedCoord.w;projectedCoord.xy=projectedCoord.xy*0.5+0.5;rayHitDepthDifference=unpackedDepth;return projectedCoord.xy;}float fastGetViewZ(const in float depth){\\n#ifdef PERSPECTIVE_CAMERA\\nreturn nearMulFar/(farMinusNear*depth-cameraFar);\\n#else\\nreturn depth*nearMinusFar-cameraNear;\\n#endif\\n}\\n#include <common>\\n#include <cube_uv_reflection_fragment>\\nvec3 getIBLRadiance(const in vec3 viewDir,const in vec3 normal,const in float roughness){\\n#if defined(ENVMAP_TYPE_CUBE_UV)\\nvec3 reflectVec=reflect(-viewDir,normal);reflectVec=normalize(mix(reflectVec,normal,roughness*roughness));reflectVec=inverseTransformDirection(reflectVec,viewMatrix);vec4 envMapColor=textureCubeUV(envMap,reflectVec,roughness);return envMapColor.rgb*intensity;\\n#else\\nreturn vec3(0.0);\\n#endif\\n}\"; // eslint-disable-line\n\nclass ReflectionsMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      type: \"ReflectionsMaterial\",\n      uniforms: {\n        inputTexture: new Uniform(null),\n        accumulatedTexture: new Uniform(null),\n        normalTexture: new Uniform(null),\n        depthTexture: new Uniform(null),\n        _projectionMatrix: new Uniform(new Matrix4()),\n        _inverseProjectionMatrix: new Uniform(new Matrix4()),\n        cameraMatrixWorld: new Uniform(new Matrix4()),\n        cameraNear: new Uniform(0),\n        cameraFar: new Uniform(0),\n        rayDistance: new Uniform(0),\n        intensity: new Uniform(0),\n        roughnessFade: new Uniform(0),\n        fade: new Uniform(0),\n        thickness: new Uniform(0),\n        ior: new Uniform(0),\n        maxDepthDifference: new Uniform(0),\n        jitter: new Uniform(0),\n        jitterRoughness: new Uniform(0),\n        maxRoughness: new Uniform(0),\n        samples: new Uniform(0),\n        envMap: new Uniform(null),\n        envMapPosition: new Uniform(new Vector3()),\n        envMapSize: new Uniform(new Vector3()),\n        viewMatrix: new Uniform(new Matrix4())\n      },\n      defines: {\n        steps: 20,\n        refineSteps: 5,\n        CUBEUV_TEXEL_WIDTH: 0,\n        CUBEUV_TEXEL_HEIGHT: 0,\n        CUBEUV_MAX_MIP: 0,\n        vWorldPosition: \"worldPos\"\n      },\n      fragmentShader: fragmentShader.replace(\"#include <helperFunctions>\", helperFunctions),\n      vertexShader: vertexShader$1,\n      toneMapped: false,\n      depthWrite: false,\n      depthTest: false\n    });\n  }\n\n}\n\nconst getVisibleChildren = object => {\n  const queue = [object];\n  const objects = [];\n\n  while (queue.length !== 0) {\n    const mesh = queue.shift();\n    if (mesh.material) objects.push(mesh);\n\n    for (const c of mesh.children) {\n      if (c.visible) queue.push(c);\n    }\n  }\n\n  return objects;\n};\n\nconst generateCubeUVSize = parameters => {\n  const imageHeight = parameters.envMapCubeUVHeight;\n  if (imageHeight === null) return null;\n  const maxMip = Math.log2(imageHeight) - 2;\n  const texelHeight = 1.0 / imageHeight;\n  const texelWidth = 1.0 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));\n  return {\n    texelWidth,\n    texelHeight,\n    maxMip\n  };\n};\n\nconst setupEnvMap = (reflectionsMaterial, envMap, envMapCubeUVHeight) => {\n  reflectionsMaterial.uniforms.envMap.value = envMap;\n  const envMapCubeUVSize = generateCubeUVSize({\n    envMapCubeUVHeight\n  });\n  reflectionsMaterial.defines.ENVMAP_TYPE_CUBE_UV = \"\";\n  reflectionsMaterial.defines.CUBEUV_TEXEL_WIDTH = envMapCubeUVSize.texelWidth;\n  reflectionsMaterial.defines.CUBEUV_TEXEL_HEIGHT = envMapCubeUVSize.texelHeight;\n  reflectionsMaterial.defines.CUBEUV_MAX_MIP = envMapCubeUVSize.maxMip + \".0\";\n  reflectionsMaterial.needsUpdate = true;\n};\n\nconst isWebGL2Available = () => {\n  try {\n    const canvas = document.createElement(\"canvas\");\n    return !!(window.WebGL2RenderingContext && canvas.getContext(\"webgl2\"));\n  } catch (e) {\n    return false;\n  }\n};\n\nclass ReflectionsPass extends Pass {\n  constructor(ssrEffect) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(\"ReflectionsPass\");\n    this.ssrEffect = void 0;\n    this.cachedMaterials = new WeakMap();\n    this.USE_MRT = false;\n    this.webgl1DepthPass = null;\n    this.visibleMeshes = [];\n    this.ssrEffect = ssrEffect;\n    this._scene = ssrEffect._scene;\n    this._camera = ssrEffect._camera;\n    this.fullscreenMaterial = new ReflectionsMaterial();\n    if (ssrEffect._camera.isPerspectiveCamera) this.fullscreenMaterial.defines.PERSPECTIVE_CAMERA = \"\";\n    const width = options.width || typeof window !== \"undefined\" ? window.innerWidth : 2000;\n    const height = options.height || typeof window !== \"undefined\" ? window.innerHeight : 1000;\n    this.renderTarget = new WebGLRenderTarget(width, height, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      type: HalfFloatType,\n      depthBuffer: false\n    });\n    this.renderPass = new RenderPass(this._scene, this._camera);\n    this.USE_MRT = isWebGL2Available();\n\n    if (this.USE_MRT) {\n      // buffers: normal, depth (2), roughness will be written to the alpha channel of the normal buffer\n      this.gBuffersRenderTarget = new WebGLMultipleRenderTargets(width, height, 2, {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter\n      });\n      this.normalTexture = this.gBuffersRenderTarget.texture[0];\n      this.depthTexture = this.gBuffersRenderTarget.texture[1];\n    } else {\n      // depth pass\n      this.webgl1DepthPass = new DepthPass(this._scene, this._camera);\n      this.webgl1DepthPass.renderTarget.minFilter = LinearFilter;\n      this.webgl1DepthPass.renderTarget.magFilter = LinearFilter;\n      this.webgl1DepthPass.renderTarget.texture.minFilter = LinearFilter;\n      this.webgl1DepthPass.renderTarget.texture.magFilter = LinearFilter;\n      this.webgl1DepthPass.setSize(typeof window !== \"undefined\" ? window.innerWidth : 2000, typeof window !== \"undefined\" ? window.innerHeight : 1000); // render normals (in the rgb channel) and roughness (in the alpha channel) in gBuffersRenderTarget\n\n      this.gBuffersRenderTarget = new WebGLRenderTarget(width, height, {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter\n      });\n      this.normalTexture = this.gBuffersRenderTarget.texture;\n      this.depthTexture = this.webgl1DepthPass.texture;\n    } // set up uniforms\n\n\n    this.fullscreenMaterial.uniforms.normalTexture.value = this.normalTexture;\n    this.fullscreenMaterial.uniforms.depthTexture.value = this.depthTexture;\n    this.fullscreenMaterial.uniforms.accumulatedTexture.value = this.ssrEffect.temporalResolvePass.accumulatedTexture;\n    this.fullscreenMaterial.uniforms.cameraMatrixWorld.value = this._camera.matrixWorld;\n    this.fullscreenMaterial.uniforms._projectionMatrix.value = this._camera.projectionMatrix;\n    this.fullscreenMaterial.uniforms._inverseProjectionMatrix.value = this._camera.projectionMatrixInverse;\n  }\n\n  setSize(width, height) {\n    this.renderTarget.setSize(width * this.ssrEffect.resolutionScale, height * this.ssrEffect.resolutionScale);\n    this.gBuffersRenderTarget.setSize(width * this.ssrEffect.resolutionScale, height * this.ssrEffect.resolutionScale);\n    this.fullscreenMaterial.uniforms.accumulatedTexture.value = this.ssrEffect.temporalResolvePass.accumulatedTexture;\n    this.fullscreenMaterial.needsUpdate = true;\n  }\n\n  dispose() {\n    this.renderTarget.dispose();\n    this.gBuffersRenderTarget.dispose();\n    this.renderPass.dispose();\n    if (!this.USE_MRT) this.webgl1DepthPass.dispose();\n    this.fullscreenMaterial.dispose();\n    this.normalTexture = null;\n    this.depthTexture = null;\n    this.velocityTexture = null;\n  }\n\n  keepMaterialMapUpdated(mrtMaterial, originalMaterial, prop, define) {\n    if (this.ssrEffect[define]) {\n      if (originalMaterial[prop] !== mrtMaterial[prop]) {\n        mrtMaterial[prop] = originalMaterial[prop];\n        mrtMaterial.uniforms[prop].value = originalMaterial[prop];\n\n        if (originalMaterial[prop]) {\n          mrtMaterial.defines[define] = \"\";\n        } else {\n          delete mrtMaterial.defines[define];\n        }\n\n        mrtMaterial.needsUpdate = true;\n      }\n    } else if (mrtMaterial[prop] !== undefined) {\n      mrtMaterial[prop] = undefined;\n      mrtMaterial.uniforms[prop].value = undefined;\n      delete mrtMaterial.defines[define];\n      mrtMaterial.needsUpdate = true;\n    }\n  }\n\n  setMRTMaterialInScene() {\n    this.visibleMeshes = getVisibleChildren(this._scene);\n\n    for (const c of this.visibleMeshes) {\n      if (c.material) {\n        const originalMaterial = c.material;\n        let [cachedOriginalMaterial, mrtMaterial] = this.cachedMaterials.get(c) || [];\n\n        if (originalMaterial !== cachedOriginalMaterial) {\n          if (mrtMaterial) mrtMaterial.dispose();\n          mrtMaterial = new MRTMaterial();\n          if (this.USE_MRT) mrtMaterial.defines.USE_MRT = \"\";\n          mrtMaterial.normalScale = originalMaterial.normalScale;\n          mrtMaterial.uniforms.normalScale.value = originalMaterial.normalScale;\n          const map = originalMaterial.map || originalMaterial.normalMap || originalMaterial.roughnessMap || originalMaterial.metalnessMap;\n          if (map) mrtMaterial.uniforms.uvTransform.value = map.matrix;\n          this.cachedMaterials.set(c, [originalMaterial, mrtMaterial]);\n        } // update the child's MRT material\n\n\n        this.keepMaterialMapUpdated(mrtMaterial, originalMaterial, \"normalMap\", \"useNormalMap\");\n        this.keepMaterialMapUpdated(mrtMaterial, originalMaterial, \"roughnessMap\", \"useRoughnessMap\");\n        mrtMaterial.uniforms.roughness.value = this.ssrEffect.selection.size === 0 || this.ssrEffect.selection.has(c) ? originalMaterial.roughness || 0 : 10e10;\n        c.material = mrtMaterial;\n      }\n    }\n  }\n\n  unsetMRTMaterialInScene() {\n    for (const c of this.visibleMeshes) {\n      var _c$material;\n\n      if (((_c$material = c.material) == null ? void 0 : _c$material.type) === \"MRTMaterial\") {\n        c.visible = true; // set material back to the original one\n\n        const [originalMaterial] = this.cachedMaterials.get(c);\n        c.material = originalMaterial;\n      }\n    }\n  }\n\n  render(renderer, inputBuffer) {\n    this.setMRTMaterialInScene();\n    renderer.setRenderTarget(this.gBuffersRenderTarget);\n    this.renderPass.render(renderer, this.gBuffersRenderTarget);\n    this.unsetMRTMaterialInScene(); // render depth and velocity in seperate passes\n\n    if (!this.USE_MRT) this.webgl1DepthPass.renderPass.render(renderer, this.webgl1DepthPass.renderTarget);\n    this.fullscreenMaterial.uniforms.inputTexture.value = inputBuffer.texture;\n    this.fullscreenMaterial.uniforms.samples.value = this.ssrEffect.temporalResolvePass.samples;\n    this.fullscreenMaterial.uniforms.cameraNear.value = this._camera.near;\n    this.fullscreenMaterial.uniforms.cameraFar.value = this._camera.far;\n    this.fullscreenMaterial.uniforms.viewMatrix.value.copy(this._camera.matrixWorldInverse);\n    renderer.setRenderTarget(this.renderTarget);\n    renderer.render(this.scene, this.camera);\n  }\n\n}\n/**\n* Options of the SSR effect\n* @typedef {Object} SSROptions\n* @property {Number} [intensity] intensity of the reflections\n* @property {Number} [exponent] exponent by which reflections will be potentiated when composing the current frame's reflections and the accumulated reflections into a final reflection; higher values will make reflections clearer by highlighting darker spots less\n* @property {Number} [distance] maximum distance a reflection ray can travel to find what it reflects\n* @property {Number} [fade] how much reflections will fade out by distance\n* @property {Number} [roughnessFade] how intense reflections should be on rough spots; a higher value will make reflections fade out quicker on rough spots\n* @property {Number} [thickness] maximum depth difference between a ray and the particular depth at its screen position before refining with binary search; higher values will result in better performance\n* @property {Number} [ior] Index of Refraction, used for calculating fresnel; reflections tend to be more intense the steeper the angle between them and the viewer is, the ior parameter sets how much the intensity varies\n* @property {Number} [maxRoughness] maximum roughness a texel can have to have reflections calculated for it\n* @property {Number} [maxDepthDifference] maximum depth difference between a ray and the particular depth at its screen position after refining with binary search; higher values will result in better performance\n* @property {Number} [blend] a value between 0 and 1 to set how much the last frame's reflections should be blended in; higher values will result in less noisy reflections when moving the camera but a more smeary look\n* @property {boolean} [correction] how much pixels should be corrected when doing temporal resolving; higher values will result in less smearing but more noise\n* @property {boolean} [correctionRadius] how many surrounding pixels will be used for neighborhood clamping; a higher value can reduce noise when moving the camera but will result in less performance\n* @property {Number} [blur] how much the blurred reflections should be mixed with the raw reflections\n* @property {Number} [blurKernel] kernel size of the Box Blur Filter; higher kernel sizes will result in blurrier reflections with more artifacts\n* @property {Number} [blurSharpness] exponent of the Box Blur filter; higher values will result in more sharpness\n* @property {Number} [jitter] how intense jittering should be\n* @property {Number} [jitterRoughness] how intense jittering should be in relation to a material's roughness\n* @property {Number} [steps] number of steps a reflection ray can maximally do to find an object it intersected (and thus reflects)\n* @property {Number} [refineSteps] once we had our ray intersect something, we need to find the exact point in space it intersected and thus it reflects; this can be done through binary search with the given number of maximum steps\n* @property {boolean} [missedRays] if there should still be reflections for rays for which a reflecting point couldn't be found; enabling this will result in stretched looking reflections which can look good or bad depending on the angle\n* @property {boolean} [useNormalMap] if roughness maps should be taken account of when calculating reflections\n* @property {boolean} [useRoughnessMap] if normal maps should be taken account of when calculating reflections\n* @property {Number} [resolutionScale] resolution of the SSR effect, a resolution of 0.5 means the effect will be rendered at half resolution\n* @property {Number} [velocityResolutionScale] resolution of the velocity buffer, a resolution of 0.5 means velocity will be rendered at half resolution\n*/\n\n/**\n * The options of the SSR effect\n * @type {SSROptions}\n */\n\n\nconst defaultSSROptions = {\n  intensity: 1,\n  exponent: 1,\n  distance: 10,\n  fade: 0,\n  roughnessFade: 1,\n  thickness: 10,\n  ior: 1.45,\n  maxRoughness: 1,\n  maxDepthDifference: 10,\n  blend: 0.9,\n  correction: 1,\n  correctionRadius: 1,\n  blur: 0.5,\n  blurKernel: 1,\n  blurSharpness: 10,\n  jitter: 0,\n  jitterRoughness: 0,\n  steps: 20,\n  refineSteps: 5,\n  missedRays: true,\n  useNormalMap: true,\n  useRoughnessMap: true,\n  resolutionScale: 1,\n  velocityResolutionScale: 1\n};\nvar vertexShader = \"#define GLSLIFY 1\\nvarying vec2 vUv;void main(){vUv=position.xy*0.5+0.5;gl_Position=vec4(position.xy,1.0,1.0);}\"; // eslint-disable-line\n\nvar temporalResolve = \"#define GLSLIFY 1\\nuniform sampler2D inputTexture;uniform sampler2D accumulatedTexture;uniform sampler2D velocityTexture;uniform sampler2D lastVelocityTexture;uniform float blend;uniform float correction;uniform float exponent;uniform float samples;uniform vec2 invTexSize;uniform mat4 curInverseProjectionMatrix;uniform mat4 curCameraMatrixWorld;uniform mat4 prevInverseProjectionMatrix;uniform mat4 prevCameraMatrixWorld;varying vec2 vUv;\\n#define MAX_NEIGHBOR_DEPTH_DIFFERENCE 0.001\\n#define FLOAT_EPSILON 0.00001\\n#define FLOAT_ONE_MINUS_EPSILON 0.99999\\nvec3 transformexponent;vec3 undoColorTransformExponent;vec3 transformColor(vec3 color){if(exponent==1.0)return color;return pow(abs(color),transformexponent);}vec3 undoColorTransform(vec3 color){if(exponent==1.0)return color;return max(pow(abs(color),undoColorTransformExponent),vec3(0.0));}void main(){if(exponent!=1.0){transformexponent=vec3(1.0/exponent);undoColorTransformExponent=vec3(exponent);}vec4 inputTexel=textureLod(inputTexture,vUv,0.0);vec4 accumulatedTexel;vec3 inputColor=transformColor(inputTexel.rgb);vec3 accumulatedColor;float alpha=inputTexel.a;float velocityDisocclusion;bool didReproject=false;\\n#ifdef boxBlur\\nvec3 boxBlurredColor=inputTexel.rgb;\\n#endif\\nvec4 velocity=textureLod(velocityTexture,vUv,0.0);bool isMoving=alpha<1.0||dot(velocity.xy,velocity.xy)>0.0;if(isMoving){vec3 minNeighborColor=inputColor;vec3 maxNeighborColor=inputColor;vec3 col;vec2 neighborUv;vec2 reprojectedUv=vUv-velocity.xy;vec4 lastVelocity=textureLod(lastVelocityTexture,reprojectedUv,0.0);float depth=velocity.b;float closestDepth=depth;float lastClosestDepth=lastVelocity.b;float neighborDepth;float lastNeighborDepth;for(int x=-correctionRadius;x<=correctionRadius;x++){for(int y=-correctionRadius;y<=correctionRadius;y++){if(x!=0||y!=0){neighborUv=vUv+vec2(x,y)*invTexSize;vec4 neigborVelocity=textureLod(velocityTexture,neighborUv,0.0);neighborDepth=neigborVelocity.b;col=textureLod(inputTexture,neighborUv,0.0).xyz;int absX=abs(x);int absY=abs(y);\\n#ifdef dilation\\nif(absX==1&&absY==1){if(neighborDepth>closestDepth){velocity=neigborVelocity;closestDepth=neighborDepth;}vec4 lastNeighborVelocity=textureLod(velocityTexture,vUv+vec2(x,y)*invTexSize,0.0);lastNeighborDepth=lastNeighborVelocity.b;if(neighborDepth>closestDepth){lastVelocity=lastNeighborVelocity;lastClosestDepth=lastNeighborDepth;}}\\n#endif\\nif(abs(depth-neighborDepth)<MAX_NEIGHBOR_DEPTH_DIFFERENCE){\\n#ifdef boxBlur\\nif(absX<=2&&absY<=2)boxBlurredColor+=col;\\n#endif\\ncol=transformColor(col);minNeighborColor=min(col,minNeighborColor);maxNeighborColor=max(col,maxNeighborColor);}}}}float velocityLength=length(lastVelocity.xy-velocity.xy);velocityDisocclusion=(velocityLength-0.000005)*10.0;velocityDisocclusion*=velocityDisocclusion;reprojectedUv=vUv-velocity.xy;\\n#ifdef boxBlur\\nfloat pxRadius=correctionRadius>5 ? 121.0 : pow(float(correctionRadius*2+1),2.0);boxBlurredColor/=pxRadius;boxBlurredColor=transformColor(boxBlurredColor);\\n#endif\\nif(reprojectedUv.x>=0.0&&reprojectedUv.x<=1.0&&reprojectedUv.y>=0.0&&reprojectedUv.y<=1.0){accumulatedTexel=textureLod(accumulatedTexture,reprojectedUv,0.0);accumulatedColor=transformColor(accumulatedTexel.rgb);vec3 clampedColor=clamp(accumulatedColor,minNeighborColor,maxNeighborColor);accumulatedColor=mix(accumulatedColor,clampedColor,correction);didReproject=true;}else{\\n#ifdef boxBlur\\naccumulatedColor=boxBlurredColor;\\n#else\\naccumulatedColor=inputColor;\\n#endif\\n}if(velocity.r>FLOAT_ONE_MINUS_EPSILON&&velocity.g>FLOAT_ONE_MINUS_EPSILON){alpha=0.0;velocityDisocclusion=1.0;}}else{accumulatedColor=transformColor(textureLod(accumulatedTexture,vUv,0.0).rgb);}vec3 outputColor=inputColor;\\n#include <custom_compose_shader>\\ngl_FragColor=vec4(undoColorTransform(outputColor),alpha);}\"; // eslint-disable-line\n\nclass TemporalResolveMaterial extends ShaderMaterial {\n  constructor(customComposeShader) {\n    const fragmentShader = temporalResolve.replace(\"#include <custom_compose_shader>\", customComposeShader);\n    super({\n      type: \"TemporalResolveMaterial\",\n      uniforms: {\n        inputTexture: new Uniform(null),\n        accumulatedTexture: new Uniform(null),\n        velocityTexture: new Uniform(null),\n        lastVelocityTexture: new Uniform(null),\n        samples: new Uniform(1),\n        blend: new Uniform(0.5),\n        correction: new Uniform(1),\n        exponent: new Uniform(1),\n        invTexSize: new Uniform(new Vector2())\n      },\n      defines: {\n        correctionRadius: 1\n      },\n      vertexShader,\n      fragmentShader\n    });\n  }\n\n} // this shader is from: https://github.com/gkjohnson/threejs-sandbox\n// a second set of bone information from the previou frame\n\n\nconst prev_skinning_pars_vertex =\n/* glsl */\n`\n\t\t#ifdef USE_SKINNING\n\t\t#ifdef BONE_TEXTURE\n\t\t\tuniform sampler2D prevBoneTexture;\n\t\t\tmat4 getPrevBoneMatrix( const in float i ) {\n\t\t\t\tfloat j = i * 4.0;\n\t\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\t\ty = dy * ( y + 0.5 );\n\t\t\t\tvec4 v1 = texture2D( prevBoneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\t\tvec4 v2 = texture2D( prevBoneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\t\tvec4 v3 = texture2D( prevBoneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\t\tvec4 v4 = texture2D( prevBoneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\t\treturn bone;\n\t\t\t}\n\t\t#else\n\t\t\tuniform mat4 prevBoneMatrices[ MAX_BONES ];\n\t\t\tmat4 getPrevBoneMatrix( const in float i ) {\n\t\t\t\tmat4 bone = prevBoneMatrices[ int(i) ];\n\t\t\t\treturn bone;\n\t\t\t}\n\t\t#endif\n\t\t#endif\n`; // Returns the body of the vertex shader for the velocity buffer and\n// outputs the position of the current and last frame positions\n\nconst velocity_vertex =\n/* glsl */\n`\n\t\tvec3 transformed;\n\n\t\t// Get the normal\n\t\t${ShaderChunk.skinbase_vertex}\n\t\t${ShaderChunk.beginnormal_vertex}\n\t\t${ShaderChunk.skinnormal_vertex}\n\t\t${ShaderChunk.defaultnormal_vertex}\n\n\t\t// Get the current vertex position\n\t\ttransformed = vec3( position );\n\t\t${ShaderChunk.skinning_vertex}\n\t\tnewPosition = velocityMatrix * vec4( transformed, 1.0 );\n\n\t\t// Get the previous vertex position\n\t\ttransformed = vec3( position );\n\t\t${ShaderChunk.skinbase_vertex.replace(/mat4 /g, \"\").replace(/getBoneMatrix/g, \"getPrevBoneMatrix\")}\n\t\t${ShaderChunk.skinning_vertex.replace(/vec4 /g, \"\")}\n\t\tprevPosition = prevVelocityMatrix * vec4( transformed, 1.0 );\n\n\t\tgl_Position = newPosition;\n`;\n\nclass VelocityMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        prevVelocityMatrix: {\n          value: new Matrix4()\n        },\n        velocityMatrix: {\n          value: new Matrix4()\n        },\n        prevBoneTexture: {\n          value: null\n        },\n        interpolateGeometry: {\n          value: 0\n        },\n        intensity: {\n          value: 1\n        },\n        boneTexture: {\n          value: null\n        },\n        alphaTest: {\n          value: 0.0\n        },\n        map: {\n          value: null\n        },\n        alphaMap: {\n          value: null\n        },\n        opacity: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n                    #define MAX_BONES 1024\n                    \n                    ${ShaderChunk.skinning_pars_vertex}\n                    ${prev_skinning_pars_vertex}\n        \n                    uniform mat4 velocityMatrix;\n                    uniform mat4 prevVelocityMatrix;\n                    uniform float interpolateGeometry;\n                    varying vec4 prevPosition;\n                    varying vec4 newPosition;\n\t\t\t\t\tvarying vec2 vHighPrecisionZW;\n        \n                    void main() {\n        \n                        ${velocity_vertex}\n\n\t\t\t\t\t\tvHighPrecisionZW = gl_Position.zw;\n        \n                    }`,\n      fragmentShader:\n      /* glsl */\n      `\n                    uniform float intensity;\n                    varying vec4 prevPosition;\n                    varying vec4 newPosition;\n\t\t\t\t\tvarying vec2 vHighPrecisionZW;\n        \n                    void main() {\n\t\t\t\t\t\t#ifdef FULL_MOVEMENT\n\t\t\t\t\t\tgl_FragColor = vec4( 1., 1., 1. - gl_FragCoord.z, 0. );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t\t#endif\n\n                        vec2 pos0 = (prevPosition.xy / prevPosition.w) * 0.5 + 0.5;\n                        vec2 pos1 = (newPosition.xy / newPosition.w) * 0.5 + 0.5;\n        \n                        vec2 vel = pos1 - pos0;\n\n\t\t\t\t\t\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n                        \n                        gl_FragColor = vec4( vel, 1. - fragCoordZ, 0. );\n        \n                    }`\n    });\n    this.isVelocityMaterial = true;\n  }\n\n}\n\nconst backgroundColor = new Color(0);\nconst updateProperties = [\"visible\", \"wireframe\", \"side\"];\n\nclass VelocityPass extends Pass {\n  constructor(scene, camera) {\n    var _window, _window2;\n\n    super(\"VelocityPass\");\n    this.cachedMaterials = new WeakMap();\n    this.lastCameraTransform = {\n      position: new Vector3(),\n      quaternion: new Quaternion()\n    };\n    this.visibleMeshes = [];\n    this.renderedMeshesThisFrame = 0;\n    this.renderedMeshesLastFrame = 0;\n    this._scene = scene;\n    this._camera = camera;\n    this.renderTarget = new WebGLRenderTarget(((_window = window) == null ? void 0 : _window.innerWidth) || 1000, ((_window2 = window) == null ? void 0 : _window2.innerHeight) || 1000, {\n      type: HalfFloatType\n    });\n  }\n\n  setVelocityMaterialInScene() {\n    this.renderedMeshesThisFrame = 0;\n    this.visibleMeshes = getVisibleChildren(this._scene);\n\n    for (const c of this.visibleMeshes) {\n      var _c$skeleton2;\n\n      const originalMaterial = c.material;\n      let [cachedOriginalMaterial, velocityMaterial] = this.cachedMaterials.get(c) || [];\n\n      if (originalMaterial !== cachedOriginalMaterial) {\n        var _c$skeleton;\n\n        velocityMaterial = new VelocityMaterial();\n        velocityMaterial.lastMatrixWorld = new Matrix4();\n        c.material = velocityMaterial;\n        if ((_c$skeleton = c.skeleton) != null && _c$skeleton.boneTexture) this.saveBoneTexture(c);\n        this.cachedMaterials.set(c, [originalMaterial, velocityMaterial]);\n      }\n\n      velocityMaterial.uniforms.velocityMatrix.value.multiplyMatrices(this._camera.projectionMatrix, c.modelViewMatrix);\n\n      if (c.userData.needsUpdatedReflections || originalMaterial.map instanceof VideoTexture) {\n        if (!(\"FULL_MOVEMENT\" in velocityMaterial.defines)) velocityMaterial.needsUpdate = true;\n        velocityMaterial.defines.FULL_MOVEMENT = \"\";\n      } else {\n        if (\"FULL_MOVEMENT\" in velocityMaterial.defines) {\n          delete velocityMaterial.defines.FULL_MOVEMENT;\n          velocityMaterial.needsUpdate = true;\n        }\n      }\n\n      c.visible = this.cameraMovedThisFrame || !c.matrixWorld.equals(velocityMaterial.lastMatrixWorld) || c.skeleton || \"FULL_MOVEMENT\" in velocityMaterial.defines;\n      c.material = velocityMaterial;\n      if (!c.visible) continue;\n      this.renderedMeshesThisFrame++;\n\n      for (const prop of updateProperties) velocityMaterial[prop] = originalMaterial[prop];\n\n      if ((_c$skeleton2 = c.skeleton) != null && _c$skeleton2.boneTexture) {\n        velocityMaterial.defines.USE_SKINNING = \"\";\n        velocityMaterial.defines.BONE_TEXTURE = \"\";\n        velocityMaterial.uniforms.boneTexture.value = c.skeleton.boneTexture;\n      }\n    }\n  }\n\n  saveBoneTexture(object) {\n    let boneTexture = object.material.uniforms.prevBoneTexture.value;\n\n    if (boneTexture && boneTexture.image.width === object.skeleton.boneTexture.width) {\n      boneTexture = object.material.uniforms.prevBoneTexture.value;\n      boneTexture.image.data.set(object.skeleton.boneTexture.image.data);\n    } else {\n      var _boneTexture;\n\n      (_boneTexture = boneTexture) == null ? void 0 : _boneTexture.dispose();\n      const boneMatrices = object.skeleton.boneTexture.image.data.slice();\n      const size = object.skeleton.boneTexture.image.width;\n      boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n      object.material.uniforms.prevBoneTexture.value = boneTexture;\n      boneTexture.needsUpdate = true;\n    }\n  }\n\n  unsetVelocityMaterialInScene() {\n    for (const c of this.visibleMeshes) {\n      if (c.material.isVelocityMaterial) {\n        var _c$skeleton3;\n\n        c.visible = true;\n        c.material.lastMatrixWorld.copy(c.matrixWorld);\n        c.material.uniforms.prevVelocityMatrix.value.multiplyMatrices(this._camera.projectionMatrix, c.modelViewMatrix);\n        if ((_c$skeleton3 = c.skeleton) != null && _c$skeleton3.boneTexture) this.saveBoneTexture(c);\n        c.material = this.cachedMaterials.get(c)[0];\n      }\n    }\n  }\n\n  setSize(width, height) {\n    this.renderTarget.setSize(width, height);\n  }\n\n  renderVelocity(renderer) {\n    renderer.setRenderTarget(this.renderTarget);\n\n    if (this.renderedMeshesThisFrame > 0) {\n      const {\n        background\n      } = this._scene;\n      this._scene.background = backgroundColor;\n      renderer.render(this._scene, this._camera);\n      this._scene.background = background;\n    } else {\n      renderer.clearColor();\n    }\n  }\n\n  checkCameraMoved() {\n    const moveDist = this.lastCameraTransform.position.distanceToSquared(this._camera.position);\n    const rotateDist = 8 * (1 - this.lastCameraTransform.quaternion.dot(this._camera.quaternion));\n\n    if (moveDist > 0.000001 || rotateDist > 0.000001) {\n      this.lastCameraTransform.position.copy(this._camera.position);\n      this.lastCameraTransform.quaternion.copy(this._camera.quaternion);\n      return true;\n    }\n\n    return false;\n  }\n\n  render(renderer) {\n    this.cameraMovedThisFrame = this.checkCameraMoved();\n    this.setVelocityMaterialInScene();\n    if (this.renderedMeshesThisFrame > 0 || this.renderedMeshesLastFrame > 0) this.renderVelocity(renderer);\n    this.unsetVelocityMaterialInScene();\n    this.renderedMeshesLastFrame = this.renderedMeshesThisFrame;\n  }\n\n}\n\nconst zeroVec2 = new Vector2(); // the following variables can be accessed by the custom compose shader:\n// \"inputTexel\", \"accumulatedTexel\", \"inputColor\", \"accumulatedColor\", \"alpha\", \"velocityDisocclusion\", \"didReproject\", \"boxBlurredColor\" (if using box blur)\n// the custom compose shader will write the final color to the variable \"outputColor\"\n\nclass TemporalResolvePass extends Pass {\n  constructor(scene, camera, customComposeShader) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(\"TemporalResolvePass\");\n    this.velocityPass = null;\n    this.velocityResolutionScale = 1;\n    this.samples = 1;\n    this.lastCameraTransform = {\n      position: new Vector3(),\n      quaternion: new Quaternion()\n    };\n    this._scene = scene;\n    this._camera = camera;\n    this.renderTarget = new WebGLRenderTarget(1, 1, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      type: HalfFloatType,\n      depthBuffer: false\n    });\n    this.velocityPass = new VelocityPass(scene, camera);\n    this.fullscreenMaterial = new TemporalResolveMaterial(customComposeShader);\n    this.fullscreenMaterial.defines.correctionRadius = options.correctionRadius || 1;\n    if (options.dilation) this.fullscreenMaterial.defines.dilation = \"\";\n    if (options.boxBlur) this.fullscreenMaterial.defines.boxBlur = \"\";\n    this.setupFramebuffers(1, 1);\n    this.checkCanUseSharedVelocityTexture();\n  }\n\n  dispose() {\n    if (this._scene.userData.velocityTexture === this.velocityPass.renderTarget.texture) {\n      delete this._scene.userData.velocityTexture;\n      delete this._scene.userData.lastVelocityTexture;\n    }\n\n    this.renderTarget.dispose();\n    this.accumulatedTexture.dispose();\n    this.fullscreenMaterial.dispose();\n    this.velocityPass.dispose();\n  }\n\n  setSize(width, height) {\n    this.renderTarget.setSize(width, height);\n    this.velocityPass.setSize(width * this.velocityResolutionScale, height * this.velocityResolutionScale);\n    this.velocityPass.renderTarget.texture.minFilter = this.velocityResolutionScale === 1 ? NearestFilter : LinearFilter;\n    this.velocityPass.renderTarget.texture.magFilter = this.velocityResolutionScale === 1 ? NearestFilter : LinearFilter;\n    this.velocityPass.renderTarget.texture.needsUpdate = true;\n    this.fullscreenMaterial.uniforms.invTexSize.value.set(1 / width, 1 / height);\n    this.setupFramebuffers(width, height);\n  }\n\n  setupFramebuffers(width, height) {\n    if (this.accumulatedTexture) this.accumulatedTexture.dispose();\n    if (this.lastVelocityTexture) this.lastVelocityTexture.dispose();\n    this.accumulatedTexture = new FramebufferTexture(width, height, RGBAFormat);\n    this.accumulatedTexture.minFilter = LinearFilter;\n    this.accumulatedTexture.magFilter = LinearFilter;\n    this.accumulatedTexture.type = HalfFloatType;\n    this.lastVelocityTexture = new FramebufferTexture(width * this.velocityResolutionScale, height * this.velocityResolutionScale, RGBAFormat);\n    this.lastVelocityTexture.minFilter = this.velocityResolutionScale === 1 ? NearestFilter : LinearFilter;\n    this.lastVelocityTexture.magFilter = this.velocityResolutionScale === 1 ? NearestFilter : LinearFilter;\n    this.lastVelocityTexture.type = HalfFloatType;\n    this.fullscreenMaterial.uniforms.accumulatedTexture.value = this.accumulatedTexture;\n    this.fullscreenMaterial.uniforms.lastVelocityTexture.value = this.lastVelocityTexture;\n    this.fullscreenMaterial.needsUpdate = true;\n  }\n\n  checkCanUseSharedVelocityTexture() {\n    const canUseSharedVelocityTexture = this._scene.userData.velocityTexture && this.velocityPass.renderTarget.texture !== this._scene.userData.velocityTexture;\n\n    if (canUseSharedVelocityTexture) {\n      // let's use the shared one instead\n      if (this.velocityPass.renderTarget.texture === this.fullscreenMaterial.uniforms.velocityTexture.value) {\n        this.fullscreenMaterial.uniforms.lastVelocityTexture.value = this._scene.userData.lastVelocityTexture;\n        this.fullscreenMaterial.uniforms.velocityTexture.value = this._scene.userData.velocityTexture;\n        this.fullscreenMaterial.needsUpdate = true;\n      }\n    } else {\n      // let's stop using the shared one (if used) and mark ours as the shared one instead\n      if (this.velocityPass.renderTarget.texture !== this.fullscreenMaterial.uniforms.velocityTexture.value) {\n        this.fullscreenMaterial.uniforms.velocityTexture.value = this.velocityPass.renderTarget.texture;\n        this.fullscreenMaterial.uniforms.lastVelocityTexture.value = this.lastVelocityTexture;\n        this.fullscreenMaterial.needsUpdate = true;\n\n        if (!this._scene.userData.velocityTexture) {\n          this._scene.userData.velocityTexture = this.velocityPass.renderTarget.texture;\n          this._scene.userData.lastVelocityTexture = this.lastVelocityTexture;\n        }\n      }\n    }\n\n    return this.velocityPass.renderTarget.texture !== this.fullscreenMaterial.uniforms.velocityTexture.value;\n  }\n\n  checkNeedsResample() {\n    const moveDist = this.lastCameraTransform.position.distanceToSquared(this._camera.position);\n    const rotateDist = 8 * (1 - this.lastCameraTransform.quaternion.dot(this._camera.quaternion));\n\n    if (moveDist > 0.000001 || rotateDist > 0.000001) {\n      this.samples = 1;\n      this.lastCameraTransform.position.copy(this._camera.position);\n      this.lastCameraTransform.quaternion.copy(this._camera.quaternion);\n    }\n  }\n\n  render(renderer) {\n    this.samples++;\n    this.checkNeedsResample();\n    this.fullscreenMaterial.uniforms.samples.value = this.samples; // const isUsingSharedVelocityTexture = this.checkCanUseSharedVelocityTexture()\n    // if (!isUsingSharedVelocityTexture) this.velocityPass.render(renderer)\n\n    renderer.setRenderTarget(this.renderTarget);\n    renderer.render(this.scene, this.camera); // save the render target's texture for use in next frame\n\n    renderer.copyFramebufferToTexture(zeroVec2, this.accumulatedTexture);\n    renderer.setRenderTarget(this.velocityPass.renderTarget);\n    renderer.copyFramebufferToTexture(zeroVec2, this.lastVelocityTexture);\n  }\n\n} // source: https://observablehq.com/@jrus/halton\n\n\nconst halton = function halton(index, base) {\n  let fraction = 1;\n  let result = 0;\n\n  while (index > 0) {\n    fraction /= base;\n    result += fraction * (index % base);\n    index = ~~(index / base); // floor division\n  }\n\n  return result;\n}; // generates Halton tuples in the range [-0.5:0.5]\n\n\nconst generateHalton23Points = count => {\n  const data = [];\n  let i = 1;\n  const end = i + count;\n\n  for (; i < end; i++) {\n    data.push([halton(i, 2) - 0.5, halton(i, 3) - 0.5]);\n  }\n\n  return data;\n};\n/* eslint-disable camelcase */\n\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n} // credits for the box-projecting shader code go to codercat (https://codercat.tk)\n\n\nconst worldposReplace =\n/* glsl */\n`\n#if defined( USE_ENVMAP ) || defined(  ) || defined ( USE_SHADOWMAP )\n    vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\n    #ifdef BOX_PROJECTED_ENV_MAP\n        vWorldPosition = worldPosition.xyz;\n    #endif\n#endif\n`;\nconst boxProjectDefinitions =\n/* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n    uniform vec3 envMapSize;\n    uniform vec3 envMapPosition;\n    varying vec3 vWorldPosition;\n    \n    vec3 parallaxCorrectNormal( vec3 v, vec3 cubeSize, vec3 cubePos ) {\n        vec3 nDir = normalize( v );\n\n        vec3 rbmax = ( .5 * cubeSize + cubePos - vWorldPosition ) / nDir;\n        vec3 rbmin = ( -.5 * cubeSize + cubePos - vWorldPosition ) / nDir;\n\n        vec3 rbminmax;\n\n        rbminmax.x = ( nDir.x > 0. ) ? rbmax.x : rbmin.x;\n        rbminmax.y = ( nDir.y > 0. ) ? rbmax.y : rbmin.y;\n        rbminmax.z = ( nDir.z > 0. ) ? rbmax.z : rbmin.z;\n\n        float correction = min( min( rbminmax.x, rbminmax.y ), rbminmax.z );\n        vec3 boxIntersection = vWorldPosition + nDir * correction;\n        \n        return boxIntersection - cubePos;\n    }\n#endif\n`; // will be inserted after \"vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\"\n\nconst getIBLIrradiance_patch =\n/* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n    worldNormal = parallaxCorrectNormal( worldNormal, envMapSize, envMapPosition );\n#endif\n`; // will be inserted after \"reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\"\n\nconst getIBLRadiance_patch =\n/* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n    reflectVec = parallaxCorrectNormal( reflectVec, envMapSize, envMapPosition );\n#endif\n`;\n\nfunction useBoxProjectedEnvMap(shader, envMapPosition, envMapSize) {\n  // defines\n  shader.defines.BOX_PROJECTED_ENV_MAP = \"\"; // uniforms\n\n  shader.uniforms.envMapPosition = {\n    value: envMapPosition\n  };\n  shader.uniforms.envMapSize = {\n    value: envMapSize\n  };\n  const line1 = new RegExp(escapeRegExp(\"vec3 worldNormal = inverseTransformDirection ( normal , viewMatrix ) ;\").replaceAll(\" \", \"\\\\s*\"), \"g\");\n  const line2 = new RegExp(escapeRegExp(\"reflectVec = inverseTransformDirection ( reflectVec , viewMatrix ) ;\").replaceAll(\" \", \"\\\\s*\"), \"g\"); // vertex shader\n\n  shader.vertexShader = \"varying vec3 vWorldPosition;\\n\" + shader.vertexShader.replace(\"#include <worldpos_vertex>\", worldposReplace); // fragment shader\n\n  shader.fragmentShader = boxProjectDefinitions + \"\\n\" + shader.fragmentShader.replace(\"#include <envmap_physical_pars_fragment>\", ShaderChunk.envmap_physical_pars_fragment).replace(line1, `vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n                ${getIBLIrradiance_patch}`).replace(line2, `reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n                ${getIBLRadiance_patch}`);\n}\n\nconst finalFragmentShader = finalSSRShader.replace(\"#include <helperFunctions>\", helperFunctions).replace(\"#include <boxBlur>\", boxBlur); // all the properties for which we don't have to resample\n\nconst noResetSamplesProperties = [\"blur\", \"blurSharpness\", \"blurKernel\"];\nconst defaultCubeRenderTarget = new WebGLCubeRenderTarget(1);\nlet pmremGenerator;\n\nclass SSREffect extends Effect {\n  /**\n   * @param {THREE.Scene} scene The scene of the SSR effect\n   * @param {THREE.Camera} camera The camera with which SSR is being rendered\n   * @param {SSROptions} [options] The optional options for the SSR effect\n   */\n  constructor(scene, camera) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSSROptions;\n    super(\"SSREffect\", finalFragmentShader, {\n      type: \"FinalSSRMaterial\",\n      uniforms: new Map([[\"reflectionsTexture\", new Uniform(null)], [\"blur\", new Uniform(0)], [\"blurSharpness\", new Uniform(0)], [\"blurKernel\", new Uniform(0)]]),\n      defines: new Map([[\"RENDER_MODE\", \"0\"]])\n    });\n    this.haltonSequence = generateHalton23Points(1024);\n    this.haltonIndex = 0;\n    this.selection = new Selection();\n    this.lastSize = void 0;\n    this.cubeCamera = new CubeCamera(0.001, 1000, defaultCubeRenderTarget);\n    this.usingBoxProjectedEnvMap = false;\n    this._scene = scene;\n    this._camera = camera;\n    const trOptions = {\n      boxBlur: true,\n      dilation: true\n    };\n    options = _extends({}, defaultSSROptions, options, trOptions); // set up passes\n    // temporal resolve pass\n\n    this.temporalResolvePass = new TemporalResolvePass(scene, camera, trCompose, options);\n    this.uniforms.get(\"reflectionsTexture\").value = this.temporalResolvePass.renderTarget.texture; // reflections pass\n\n    this.reflectionsPass = new ReflectionsPass(this, options);\n    this.temporalResolvePass.fullscreenMaterial.uniforms.inputTexture.value = this.reflectionsPass.renderTarget.texture;\n    this.lastSize = {\n      width: options.width,\n      height: options.height,\n      resolutionScale: options.resolutionScale,\n      velocityResolutionScale: options.velocityResolutionScale\n    };\n    this.setSize(options.width, options.height);\n    this.makeOptionsReactive(options);\n  }\n\n  makeOptionsReactive(options) {\n    let needsUpdate = false;\n    const reflectionPassFullscreenMaterialUniforms = this.reflectionsPass.fullscreenMaterial.uniforms;\n    const reflectionPassFullscreenMaterialUniformsKeys = Object.keys(reflectionPassFullscreenMaterialUniforms);\n\n    for (const key of Object.keys(options)) {\n      Object.defineProperty(this, key, {\n        get() {\n          return options[key];\n        },\n\n        set(value) {\n          if (options[key] === value && needsUpdate) return;\n          options[key] = value;\n\n          if (!noResetSamplesProperties.includes(key)) {\n            this.setSize(this.lastSize.width, this.lastSize.height, true);\n          }\n\n          switch (key) {\n            case \"resolutionScale\":\n              this.setSize(this.lastSize.width, this.lastSize.height);\n              break;\n\n            case \"velocityResolutionScale\":\n              this.temporalResolvePass.velocityResolutionScale = value;\n              this.setSize(this.lastSize.width, this.lastSize.height, true);\n              break;\n\n            case \"blur\":\n              this.uniforms.get(\"blur\").value = value;\n              break;\n\n            case \"blurSharpness\":\n              this.uniforms.get(\"blurSharpness\").value = value;\n              break;\n\n            case \"blurKernel\":\n              this.uniforms.get(\"blurKernel\").value = value;\n              break;\n            // defines\n\n            case \"steps\":\n              this.reflectionsPass.fullscreenMaterial.defines.steps = parseInt(value);\n              this.reflectionsPass.fullscreenMaterial.needsUpdate = needsUpdate;\n              break;\n\n            case \"refineSteps\":\n              this.reflectionsPass.fullscreenMaterial.defines.refineSteps = parseInt(value);\n              this.reflectionsPass.fullscreenMaterial.needsUpdate = needsUpdate;\n              break;\n\n            case \"missedRays\":\n              if (value) {\n                this.reflectionsPass.fullscreenMaterial.defines.missedRays = \"\";\n              } else {\n                delete this.reflectionsPass.fullscreenMaterial.defines.missedRays;\n              }\n\n              this.reflectionsPass.fullscreenMaterial.needsUpdate = needsUpdate;\n              break;\n\n            case \"correctionRadius\":\n              this.temporalResolvePass.fullscreenMaterial.defines.correctionRadius = Math.round(value);\n              this.temporalResolvePass.fullscreenMaterial.needsUpdate = needsUpdate;\n              break;\n\n            case \"blend\":\n              this.temporalResolvePass.fullscreenMaterial.uniforms.blend.value = value;\n              break;\n\n            case \"correction\":\n              this.temporalResolvePass.fullscreenMaterial.uniforms.correction.value = value;\n              break;\n\n            case \"exponent\":\n              this.temporalResolvePass.fullscreenMaterial.uniforms.exponent.value = value;\n              break;\n\n            case \"distance\":\n              reflectionPassFullscreenMaterialUniforms.rayDistance.value = value;\n            // must be a uniform\n\n            default:\n              if (reflectionPassFullscreenMaterialUniformsKeys.includes(key)) {\n                reflectionPassFullscreenMaterialUniforms[key].value = value;\n              }\n\n          }\n        }\n\n      }); // apply all uniforms and defines\n\n      this[key] = options[key];\n    }\n\n    needsUpdate = true;\n  }\n\n  setSize(width, height) {\n    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!force && width === this.lastSize.width && height === this.lastSize.height && this.resolutionScale === this.lastSize.resolutionScale && this.velocityResolutionScale === this.lastSize.velocityResolutionScale) return;\n    this.temporalResolvePass.setSize(width, height);\n    this.reflectionsPass.setSize(width, height);\n    this.lastSize = {\n      width,\n      height,\n      resolutionScale: this.resolutionScale,\n      velocityResolutionScale: this.velocityResolutionScale\n    };\n  }\n\n  generateBoxProjectedEnvMapFallback(renderer) {\n    let position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    let size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n    let envMapSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 512;\n    this.cubeCamera.renderTarget.dispose();\n    this.cubeCamera.renderTarget = new WebGLCubeRenderTarget(envMapSize);\n    this.cubeCamera.position.copy(position);\n    this.cubeCamera.updateMatrixWorld();\n    this.cubeCamera.update(renderer, this._scene);\n\n    if (!pmremGenerator) {\n      pmremGenerator = new PMREMGenerator(renderer);\n      pmremGenerator.compileCubemapShader();\n    }\n\n    const envMap = pmremGenerator.fromCubemap(this.cubeCamera.renderTarget.texture).texture;\n    envMap.minFilter = LinearFilter;\n    envMap.magFilter = LinearFilter;\n    const reflectionsMaterial = this.reflectionsPass.fullscreenMaterial;\n    useBoxProjectedEnvMap(reflectionsMaterial, position, size);\n    reflectionsMaterial.fragmentShader = reflectionsMaterial.fragmentShader.replace(\"vec3 worldPos\", \"worldPos\").replace(\"varying vec3 vWorldPosition;\", \"vec3 worldPos;\");\n    reflectionsMaterial.uniforms.envMapPosition.value.copy(position);\n    reflectionsMaterial.uniforms.envMapSize.value.copy(size);\n    setupEnvMap(reflectionsMaterial, envMap, envMapSize);\n    this.usingBoxProjectedEnvMap = true;\n    return envMap;\n  }\n\n  setIBLRadiance(iblRadiance, renderer) {\n    this._scene.traverse(c => {\n      if (c.material) {\n        var _renderer$properties$;\n\n        const uniforms = (_renderer$properties$ = renderer.properties.get(c.material)) == null ? void 0 : _renderer$properties$.uniforms;\n\n        if (uniforms && \"disableIBLRadiance\" in uniforms) {\n          uniforms.disableIBLRadiance.value = iblRadiance;\n        }\n      }\n    });\n  }\n\n  deleteBoxProjectedEnvMapFallback() {\n    const reflectionsMaterial = this.reflectionsPass.fullscreenMaterial;\n    reflectionsMaterial.uniforms.envMap.value = null;\n    reflectionsMaterial.fragmentShader = reflectionsMaterial.fragmentShader.replace(\"worldPos = \", \"vec3 worldPos = \");\n    delete reflectionsMaterial.defines.BOX_PROJECTED_ENV_MAP;\n    reflectionsMaterial.needsUpdate = true;\n    this.usingBoxProjectedEnvMap = false;\n  }\n\n  dispose() {\n    super.dispose();\n    this.reflectionsPass.dispose();\n    this.temporalResolvePass.dispose();\n  }\n\n  update(renderer, inputBuffer) {\n    if (!this.usingBoxProjectedEnvMap && this._scene.environment) {\n      const reflectionsMaterial = this.reflectionsPass.fullscreenMaterial;\n      let envMap = null; // not sure if there is a cleaner way to find the internal texture of a CubeTexture (when used as scene environment)\n\n      this._scene.traverse(c => {\n        if (!envMap && c.material && !c.material.envMap) {\n          const properties = renderer.properties.get(c.material);\n          if (\"envMap\" in properties && properties.envMap instanceof Texture) envMap = properties.envMap;\n        }\n      });\n\n      if (envMap) {\n        const envMapCubeUVHeight = this._scene.environment.image.height;\n        setupEnvMap(reflectionsMaterial, envMap, envMapCubeUVHeight);\n      }\n    }\n\n    this.haltonIndex = (this.haltonIndex + 1) % this.haltonSequence.length;\n    const [x, y] = this.haltonSequence[this.haltonIndex];\n    const {\n      width,\n      height\n    } = this.lastSize;\n    this.temporalResolvePass.velocityPass.render(renderer); // jittering the view offset each frame reduces aliasing for the reflection\n\n    if (this._camera.setViewOffset) this._camera.setViewOffset(width, height, x, y, width, height); // render reflections of current frame\n\n    this.reflectionsPass.render(renderer, inputBuffer); // compose reflection of last and current frame into one reflection\n\n    this.temporalResolvePass.render(renderer);\n\n    this._camera.clearViewOffset();\n  }\n\n  static patchDirectEnvIntensity() {\n    let envMapIntensity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    if (envMapIntensity === 0) {\n      ShaderChunk.envmap_physical_pars_fragment = ShaderChunk.envmap_physical_pars_fragment.replace(\"vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\", \"vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) { return vec3(0.0);\");\n    } else {\n      ShaderChunk.envmap_physical_pars_fragment = ShaderChunk.envmap_physical_pars_fragment.replace(\"vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\", \"vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness ) * \" + envMapIntensity.toFixed(5) + \";\");\n    }\n  }\n\n}\n\nexport { SSREffect, defaultSSROptions };","map":{"version":3,"names":["Pass","RenderPass","DepthPass","Effect","Selection","ShaderMaterial","Uniform","Vector2","Matrix3","TangentSpaceNormalMap","GLSL3","Matrix4","Vector3","WebGLRenderTarget","LinearFilter","HalfFloatType","WebGLMultipleRenderTargets","ShaderChunk","Color","Quaternion","VideoTexture","DataTexture","RGBAFormat","FloatType","NearestFilter","FramebufferTexture","WebGLCubeRenderTarget","CubeCamera","PMREMGenerator","Texture","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","boxBlur","finalSSRShader","helperFunctions","trCompose","MRTMaterial","constructor","type","defines","USE_UV","TEMPORAL_RESOLVE","uniforms","opacity","normalMap","normalScale","uvTransform","roughness","roughnessMap","vertexShader","fragmentShader","toneMapped","normalMapType","defineProperty","get","set","_","vertexShader$1","ReflectionsMaterial","inputTexture","accumulatedTexture","normalTexture","depthTexture","_projectionMatrix","_inverseProjectionMatrix","cameraMatrixWorld","cameraNear","cameraFar","rayDistance","intensity","roughnessFade","fade","thickness","ior","maxDepthDifference","jitter","jitterRoughness","maxRoughness","samples","envMap","envMapPosition","envMapSize","viewMatrix","steps","refineSteps","CUBEUV_TEXEL_WIDTH","CUBEUV_TEXEL_HEIGHT","CUBEUV_MAX_MIP","vWorldPosition","replace","depthWrite","depthTest","getVisibleChildren","object","queue","objects","mesh","shift","material","push","c","children","visible","generateCubeUVSize","parameters","imageHeight","envMapCubeUVHeight","maxMip","Math","log2","texelHeight","texelWidth","max","pow","setupEnvMap","reflectionsMaterial","value","envMapCubeUVSize","ENVMAP_TYPE_CUBE_UV","needsUpdate","isWebGL2Available","canvas","document","createElement","window","WebGL2RenderingContext","getContext","e","ReflectionsPass","ssrEffect","options","cachedMaterials","WeakMap","USE_MRT","webgl1DepthPass","visibleMeshes","_scene","_camera","fullscreenMaterial","isPerspectiveCamera","PERSPECTIVE_CAMERA","width","innerWidth","height","innerHeight","renderTarget","minFilter","magFilter","depthBuffer","renderPass","gBuffersRenderTarget","texture","setSize","temporalResolvePass","matrixWorld","projectionMatrix","projectionMatrixInverse","resolutionScale","dispose","velocityTexture","keepMaterialMapUpdated","mrtMaterial","originalMaterial","prop","define","undefined","setMRTMaterialInScene","cachedOriginalMaterial","map","metalnessMap","matrix","selection","size","has","unsetMRTMaterialInScene","_c$material","render","renderer","inputBuffer","setRenderTarget","near","far","copy","matrixWorldInverse","scene","camera","defaultSSROptions","exponent","distance","blend","correction","correctionRadius","blur","blurKernel","blurSharpness","missedRays","useNormalMap","useRoughnessMap","velocityResolutionScale","temporalResolve","TemporalResolveMaterial","customComposeShader","lastVelocityTexture","invTexSize","prev_skinning_pars_vertex","velocity_vertex","skinbase_vertex","beginnormal_vertex","skinnormal_vertex","defaultnormal_vertex","skinning_vertex","VelocityMaterial","prevVelocityMatrix","velocityMatrix","prevBoneTexture","interpolateGeometry","boneTexture","alphaTest","alphaMap","skinning_pars_vertex","isVelocityMaterial","backgroundColor","updateProperties","VelocityPass","_window","_window2","lastCameraTransform","position","quaternion","renderedMeshesThisFrame","renderedMeshesLastFrame","setVelocityMaterialInScene","_c$skeleton2","velocityMaterial","_c$skeleton","lastMatrixWorld","skeleton","saveBoneTexture","multiplyMatrices","modelViewMatrix","userData","needsUpdatedReflections","FULL_MOVEMENT","cameraMovedThisFrame","equals","USE_SKINNING","BONE_TEXTURE","image","data","_boneTexture","boneMatrices","slice","unsetVelocityMaterialInScene","_c$skeleton3","renderVelocity","background","clearColor","checkCameraMoved","moveDist","distanceToSquared","rotateDist","dot","zeroVec2","TemporalResolvePass","velocityPass","dilation","setupFramebuffers","checkCanUseSharedVelocityTexture","canUseSharedVelocityTexture","checkNeedsResample","copyFramebufferToTexture","halton","index","base","fraction","result","generateHalton23Points","count","end","escapeRegExp","string","worldposReplace","boxProjectDefinitions","getIBLIrradiance_patch","getIBLRadiance_patch","useBoxProjectedEnvMap","shader","BOX_PROJECTED_ENV_MAP","line1","RegExp","replaceAll","line2","envmap_physical_pars_fragment","finalFragmentShader","noResetSamplesProperties","defaultCubeRenderTarget","pmremGenerator","SSREffect","Map","haltonSequence","haltonIndex","lastSize","cubeCamera","usingBoxProjectedEnvMap","trOptions","reflectionsPass","makeOptionsReactive","reflectionPassFullscreenMaterialUniforms","reflectionPassFullscreenMaterialUniformsKeys","keys","includes","parseInt","round","force","generateBoxProjectedEnvMapFallback","updateMatrixWorld","update","compileCubemapShader","fromCubemap","setIBLRadiance","iblRadiance","traverse","_renderer$properties$","properties","disableIBLRadiance","deleteBoxProjectedEnvMapFallback","environment","x","y","setViewOffset","clearViewOffset","patchDirectEnvIntensity","envMapIntensity","toFixed"],"sources":["C:/Users/user/Desktop/GIRINEE/S07P22A202/frontend/node_modules/screen-space-reflections/dist/index.js"],"sourcesContent":["import { Pass, RenderPass, DepthPass, Effect, Selection } from 'postprocessing';\nimport { ShaderMaterial, Uniform, Vector2, Matrix3, TangentSpaceNormalMap, GLSL3, Matrix4, Vector3, WebGLRenderTarget, LinearFilter, HalfFloatType, WebGLMultipleRenderTargets, ShaderChunk, Color, Quaternion, VideoTexture, DataTexture, RGBAFormat, FloatType, NearestFilter, FramebufferTexture, WebGLCubeRenderTarget, CubeCamera, PMREMGenerator, Texture } from 'three';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nvar boxBlur = \"#define GLSLIFY 1\\nuniform float blur;uniform float blurSharpness;uniform int blurKernel;vec3 denoise(vec3 center,sampler2D tex,vec2 uv,vec2 invTexSize,float blur,float blurSharpness,int blurKernel){vec3 color;float total;vec3 col;float weight;for(int x=-blurKernel;x<=blurKernel;x++){for(int y=-blurKernel;y<=blurKernel;y++){col=textureLod(tex,uv+vec2(x,y)*invTexSize,0.).rgb;weight=1.0-abs(dot(col-center,vec3(0.25)));weight=pow(weight,blurSharpness);color+=col*weight;total+=weight;}}return color/total;}\"; // eslint-disable-line\n\nvar finalSSRShader = \"#define GLSLIFY 1\\n#define MODE_DEFAULT 0\\n#define MODE_REFLECTIONS 1\\n#define MODE_RAW_REFLECTION 2\\n#define MODE_BLURRED_REFLECTIONS 3\\n#define MODE_INPUT 4\\n#define MODE_BLUR_MIX 5\\n#define FLOAT_EPSILON 0.00001\\nuniform sampler2D inputTexture;uniform sampler2D reflectionsTexture;uniform float samples;\\n#include <boxBlur>\\nvoid mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){vec4 reflectionsTexel=texture2D(reflectionsTexture,vUv);ivec2 size=textureSize(reflectionsTexture,0);vec2 invTexSize=1./vec2(size.x,size.y);vec3 reflectionClr=reflectionsTexel.xyz;if(blur>FLOAT_EPSILON){vec3 blurredReflectionsColor=denoise(reflectionsTexel.rgb,reflectionsTexture,vUv,invTexSize,blur,blurSharpness,blurKernel);reflectionClr=mix(reflectionClr,blurredReflectionsColor.rgb,blur);}\\n#if RENDER_MODE == MODE_DEFAULT\\noutputColor=vec4(inputColor.rgb+reflectionClr,1.0);\\n#endif\\n#if RENDER_MODE == MODE_REFLECTIONS\\noutputColor=vec4(reflectionClr,1.0);\\n#endif\\n#if RENDER_MODE == MODE_RAW_REFLECTION\\noutputColor=vec4(reflectionsTexel.xyz,1.0);\\n#endif\\n#if RENDER_MODE == MODE_BLURRED_REFLECTIONS\\noutputColor=vec4(blurredReflectionsTexel.xyz,1.0);\\n#endif\\n#if RENDER_MODE == MODE_INPUT\\noutputColor=vec4(inputColor.xyz,1.0);\\n#endif\\n#if RENDER_MODE == MODE_BLUR_MIX\\noutputColor=vec4(vec3(blur),1.0);\\n#endif\\n}\"; // eslint-disable-line\n\nvar helperFunctions = \"#define GLSLIFY 1\\nvec3 getViewPosition(const float depth){float clipW=_projectionMatrix[2][3]*depth+_projectionMatrix[3][3];vec4 clipPosition=vec4((vec3(vUv,depth)-0.5)*2.0,1.0);clipPosition*=clipW;return(_inverseProjectionMatrix*clipPosition).xyz;}float getViewZ(const in float depth){\\n#ifdef PERSPECTIVE_CAMERA\\nreturn perspectiveDepthToViewZ(depth,cameraNear,cameraFar);\\n#else\\nreturn orthographicDepthToViewZ(depth,cameraNear,cameraFar);\\n#endif\\n}vec3 screenSpaceToWorldSpace(const vec2 uv,const float depth){vec4 ndc=vec4((uv.x-0.5)*2.0,(uv.y-0.5)*2.0,(depth-0.5)*2.0,1.0);vec4 clip=_inverseProjectionMatrix*ndc;vec4 view=cameraMatrixWorld*(clip/clip.w);return view.xyz;}\\n#define Scale (vec3(0.8, 0.8, 0.8))\\n#define K (19.19)\\nvec3 hash(vec3 a){a=fract(a*Scale);a+=dot(a,a.yxz+K);return fract((a.xxy+a.yxx)*a.zyx);}float fresnel_dielectric_cos(float cosi,float eta){float c=abs(cosi);float g=eta*eta-1.0+c*c;float result;if(g>0.0){g=sqrt(g);float A=(g-c)/(g+c);float B=(c*(g+c)-1.0)/(c*(g-c)+1.0);result=0.5*A*A*(1.0+B*B);}else{result=1.0;}return result;}float fresnel_dielectric(vec3 Incoming,vec3 Normal,float eta){float cosine=dot(Incoming,Normal);return min(1.0,5.0*fresnel_dielectric_cos(cosine,eta));}\"; // eslint-disable-line\n\nvar trCompose = \"#define GLSLIFY 1\\n#define INV_EULER 0.36787944117144233\\nalpha=velocityDisocclusion<FLOAT_EPSILON ?(alpha+0.0075): 0.0;alpha=clamp(alpha,0.0,1.0);bool needsBlur=!didReproject||velocityDisocclusion>0.5;\\n#ifdef boxBlur\\nif(needsBlur)inputColor=boxBlurredColor;\\n#endif\\nif(alpha==1.0){outputColor=accumulatedColor;}else{float m=mix(alpha,1.0,blend);if(needsBlur)m=0.0;outputColor=accumulatedColor*m+inputColor*(1.0-m);}\"; // eslint-disable-line\n\n// WebGL2: will render normals to RGB channel of \"gNormal\" buffer, roughness to A channel of \"gNormal\" buffer, depth to RGBA channel of \"gDepth\" buffer\n// and velocity to \"gVelocity\" buffer\n\nclass MRTMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      type: \"MRTMaterial\",\n      defines: {\n        USE_UV: \"\",\n        TEMPORAL_RESOLVE: \"\"\n      },\n      uniforms: {\n        opacity: new Uniform(1),\n        normalMap: new Uniform(null),\n        normalScale: new Uniform(new Vector2(1, 1)),\n        uvTransform: new Uniform(new Matrix3()),\n        roughness: new Uniform(1),\n        roughnessMap: new Uniform(null)\n      },\n      vertexShader:\n      /* glsl */\n      `\n                #ifdef USE_MRT\n                 varying vec2 vHighPrecisionZW;\n                #endif\n                #define NORMAL\n                #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n                    varying vec3 vViewPosition;\n                #endif\n                #include <common>\n                #include <uv_pars_vertex>\n                #include <displacementmap_pars_vertex>\n                #include <normal_pars_vertex>\n                #include <morphtarget_pars_vertex>\n                #include <skinning_pars_vertex>\n                #include <logdepthbuf_pars_vertex>\n                #include <clipping_planes_pars_vertex>\n                void main() {\n                    #include <uv_vertex>\n                    #include <beginnormal_vertex>\n                    #include <morphnormal_vertex>\n                    #include <skinbase_vertex>\n                    #include <skinnormal_vertex>\n                    #include <defaultnormal_vertex>\n                    #include <normal_vertex>\n                    #include <begin_vertex>\n                    #include <morphtarget_vertex>\n                    #include <skinning_vertex>\n                    #include <displacementmap_vertex>\n                    #include <project_vertex>\n                    #include <logdepthbuf_vertex>\n                    #include <clipping_planes_vertex>\n                    #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n                        vViewPosition = - mvPosition.xyz;\n                    #endif\n                    #ifdef USE_MRT\n                        vHighPrecisionZW = gl_Position.zw;\n                    #endif \n                    #ifdef USE_UV\n                        vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n                    #endif\n                }\n            `,\n      fragmentShader:\n      /* glsl */\n      `\n                 #define NORMAL\n                #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n                    varying vec3 vViewPosition;\n                #endif\n                #include <packing>\n                #include <uv_pars_fragment>\n                #include <normal_pars_fragment>\n                #include <bumpmap_pars_fragment>\n                #include <normalmap_pars_fragment>\n                #include <logdepthbuf_pars_fragment>\n                #include <clipping_planes_pars_fragment>\n                #include <roughnessmap_pars_fragment>\n                \n                #ifdef USE_MRT\n                layout(location = 0) out vec4 gNormal;\n                layout(location = 1) out vec4 gDepth;\n                \n                varying vec2 vHighPrecisionZW;\n                #endif\n                uniform float roughness;\n                void main() {\n                    #include <clipping_planes_fragment>\n                    #include <logdepthbuf_fragment>\n                    #include <normal_fragment_begin>\n                    #include <normal_fragment_maps>\n\n                    float roughnessFactor = roughness;\n                    \n                    if(roughness > 10.0e9){\n                        roughnessFactor = 1.;\n                    }else{\n                        #ifdef useRoughnessMap\n                            vec4 texelRoughness = texture2D( roughnessMap, vUv );\n                            // reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n                            roughnessFactor *= texelRoughness.g;\n                        #endif\n                    }\n\n                    vec3 normalColor = packNormalToRGB( normal );\n                    #ifdef USE_MRT\n                        float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n                        vec4 depthColor = packDepthToRGBA( fragCoordZ );\n                        gNormal = vec4( normalColor, roughnessFactor );\n                        gDepth = depthColor;\n                    #else\n                        gl_FragColor = vec4(normalColor, roughnessFactor);\n                    #endif\n                }\n            `,\n      toneMapped: false\n    });\n    this.normalMapType = TangentSpaceNormalMap;\n    this.normalScale = new Vector2(1, 1);\n    Object.defineProperty(this, \"glslVersion\", {\n      get() {\n        return \"USE_MRT\" in this.defines ? GLSL3 : null;\n      },\n\n      set(_) {}\n\n    });\n  }\n\n}\n\nvar vertexShader$1 = \"#define GLSLIFY 1\\nvarying vec2 vUv;void main(){vUv=position.xy*0.5+0.5;gl_Position=vec4(position.xy,1.0,1.0);}\"; // eslint-disable-line\n\nvar fragmentShader = \"#define GLSLIFY 1\\nvarying vec2 vUv;uniform sampler2D inputTexture;uniform sampler2D accumulatedTexture;uniform sampler2D normalTexture;uniform sampler2D depthTexture;uniform sampler2D envMap;uniform mat4 _projectionMatrix;uniform mat4 _inverseProjectionMatrix;uniform mat4 cameraMatrixWorld;uniform float cameraNear;uniform float cameraFar;uniform float rayDistance;uniform float intensity;uniform float maxDepthDifference;uniform float roughnessFade;uniform float maxRoughness;uniform float fade;uniform float thickness;uniform float ior;uniform float samples;uniform float jitter;uniform float jitterRoughness;\\n#define INVALID_RAY_COORDS vec2(-1.0);\\n#define EARLY_OUT_COLOR vec4(0.0, 0.0, 0.0, 1.0)\\n#define FLOAT_EPSILON 0.00001\\nfloat nearMinusFar;float nearMulFar;float farMinusNear;\\n#include <packing>\\n#include <helperFunctions>\\nvec2 RayMarch(vec3 dir,inout vec3 hitPos,inout float rayHitDepthDifference);vec2 BinarySearch(in vec3 dir,inout vec3 hitPos,inout float rayHitDepthDifference);float fastGetViewZ(const in float depth);vec3 getIBLRadiance(const in vec3 viewDir,const in vec3 normal,const in float roughness);void main(){vec4 depthTexel=textureLod(depthTexture,vUv,0.0);if(dot(depthTexel.rgb,depthTexel.rgb)<FLOAT_EPSILON){gl_FragColor=EARLY_OUT_COLOR;return;}float unpackedDepth=unpackRGBAToDepth(depthTexel);vec4 normalTexel=textureLod(normalTexture,vUv,0.0);float roughness=normalTexel.a;float specular=1.0-roughness;nearMinusFar=cameraNear-cameraFar;nearMulFar=cameraNear*cameraFar;farMinusNear=cameraFar-cameraNear;normalTexel.rgb=unpackRGBToNormal(normalTexel.rgb);float depth=fastGetViewZ(unpackedDepth);vec3 viewPos=getViewPosition(depth);vec3 viewDir=normalize(viewPos);vec3 viewNormal=normalTexel.xyz;vec3 worldPos=screenSpaceToWorldSpace(vUv,unpackedDepth);vec3 jitt=vec3(0.0);if(jitterRoughness!=0.0||jitter!=0.0){vec3 randomJitter=hash(50.0*samples*worldPos)-0.5;float spread=((2.0-specular)+roughness*jitterRoughness);float jitterMix=jitter*0.25+jitterRoughness*roughness;if(jitterMix>1.0)jitterMix=1.0;jitt=mix(vec3(0.0),randomJitter*spread,jitterMix);}viewNormal+=jitt;float fresnelFactor=fresnel_dielectric(viewDir,viewNormal,ior);vec3 iblRadiance=getIBLRadiance(-viewDir,viewNormal,0.)*fresnelFactor;float lastFrameAlpha=textureLod(accumulatedTexture,vUv,0.0).a;if(roughness>maxRoughness||(roughness>1.0-FLOAT_EPSILON&&roughnessFade>1.0-FLOAT_EPSILON)){gl_FragColor=vec4(iblRadiance,lastFrameAlpha);return;}vec3 reflected=reflect(viewDir,viewNormal);vec3 rayDir=reflected*-viewPos.z;vec3 hitPos=viewPos;float rayHitDepthDifference;vec2 coords=RayMarch(rayDir,hitPos,rayHitDepthDifference);if(coords.x==-1.0){gl_FragColor=vec4(iblRadiance,lastFrameAlpha);return;}vec4 SSRTexel=textureLod(inputTexture,coords.xy,0.0);vec4 SSRTexelReflected=textureLod(accumulatedTexture,coords.xy,0.0);vec3 SSR=SSRTexel.rgb+SSRTexelReflected.rgb;float roughnessFactor=mix(specular,1.0,max(0.0,1.0-roughnessFade));vec2 coordsNDC=(coords.xy*2.0-1.0);float screenFade=0.1;float maxDimension=min(1.0,max(abs(coordsNDC.x),abs(coordsNDC.y)));float reflectionIntensity=1.0-(max(0.0,maxDimension-screenFade)/(1.0-screenFade));reflectionIntensity=max(0.,reflectionIntensity);vec3 finalSSR=mix(iblRadiance,SSR,reflectionIntensity)*roughnessFactor;if(fade!=0.0){vec3 hitWorldPos=screenSpaceToWorldSpace(coords,rayHitDepthDifference);float reflectionDistance=distance(hitWorldPos,worldPos)+1.0;float opacity=1.0/(reflectionDistance*fade*0.1);if(opacity>1.0)opacity=1.0;finalSSR*=opacity;}finalSSR*=fresnelFactor*intensity;finalSSR=min(vec3(1.0),finalSSR);float alpha=hitPos.z==1.0 ? 1.0 : SSRTexelReflected.a;alpha=min(lastFrameAlpha,alpha);gl_FragColor=vec4(finalSSR,alpha);}vec2 RayMarch(vec3 dir,inout vec3 hitPos,inout float rayHitDepthDifference){dir=normalize(dir);dir*=rayDistance/float(steps);float depth;vec4 projectedCoord;vec4 lastProjectedCoord;float unpackedDepth;vec4 depthTexel;for(int i=0;i<steps;i++){hitPos+=dir;projectedCoord=_projectionMatrix*vec4(hitPos,1.0);projectedCoord.xy/=projectedCoord.w;projectedCoord.xy=projectedCoord.xy*0.5+0.5;\\n#ifndef missedRays\\nif(projectedCoord.x<0.0||projectedCoord.x>1.0||projectedCoord.y<0.0||projectedCoord.y>1.0){return INVALID_RAY_COORDS;}\\n#endif\\ndepthTexel=textureLod(depthTexture,projectedCoord.xy,0.0);unpackedDepth=unpackRGBAToDepth(depthTexel);depth=fastGetViewZ(unpackedDepth);rayHitDepthDifference=depth-hitPos.z;if(rayHitDepthDifference>=0.0&&rayHitDepthDifference<thickness){\\n#if refineSteps == 0\\nif(dot(depthTexel.rgb,depthTexel.rgb)<FLOAT_EPSILON)return INVALID_RAY_COORDS;\\n#else\\nreturn BinarySearch(dir,hitPos,rayHitDepthDifference);\\n#endif\\n}\\n#ifndef missedRays\\nif(hitPos.z>0.0){return INVALID_RAY_COORDS;}\\n#endif\\nlastProjectedCoord=projectedCoord;}hitPos.z=1.0;\\n#ifndef missedRays\\nreturn INVALID_RAY_COORDS;\\n#endif\\nrayHitDepthDifference=unpackedDepth;return projectedCoord.xy;}vec2 BinarySearch(in vec3 dir,inout vec3 hitPos,inout float rayHitDepthDifference){float depth;vec4 projectedCoord;vec2 lastMinProjectedCoordXY;float unpackedDepth;vec4 depthTexel;for(int i=0;i<refineSteps;i++){projectedCoord=_projectionMatrix*vec4(hitPos,1.0);projectedCoord.xy/=projectedCoord.w;projectedCoord.xy=projectedCoord.xy*0.5+0.5;depthTexel=textureLod(depthTexture,projectedCoord.xy,0.0);unpackedDepth=unpackRGBAToDepth(depthTexel);depth=fastGetViewZ(unpackedDepth);rayHitDepthDifference=depth-hitPos.z;dir*=0.5;if(rayHitDepthDifference>0.0){hitPos-=dir;}else{hitPos+=dir;}}if(dot(depthTexel.rgb,depthTexel.rgb)<FLOAT_EPSILON)return INVALID_RAY_COORDS;if(abs(rayHitDepthDifference)>maxDepthDifference)return INVALID_RAY_COORDS;projectedCoord=_projectionMatrix*vec4(hitPos,1.0);projectedCoord.xy/=projectedCoord.w;projectedCoord.xy=projectedCoord.xy*0.5+0.5;rayHitDepthDifference=unpackedDepth;return projectedCoord.xy;}float fastGetViewZ(const in float depth){\\n#ifdef PERSPECTIVE_CAMERA\\nreturn nearMulFar/(farMinusNear*depth-cameraFar);\\n#else\\nreturn depth*nearMinusFar-cameraNear;\\n#endif\\n}\\n#include <common>\\n#include <cube_uv_reflection_fragment>\\nvec3 getIBLRadiance(const in vec3 viewDir,const in vec3 normal,const in float roughness){\\n#if defined(ENVMAP_TYPE_CUBE_UV)\\nvec3 reflectVec=reflect(-viewDir,normal);reflectVec=normalize(mix(reflectVec,normal,roughness*roughness));reflectVec=inverseTransformDirection(reflectVec,viewMatrix);vec4 envMapColor=textureCubeUV(envMap,reflectVec,roughness);return envMapColor.rgb*intensity;\\n#else\\nreturn vec3(0.0);\\n#endif\\n}\"; // eslint-disable-line\n\nclass ReflectionsMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      type: \"ReflectionsMaterial\",\n      uniforms: {\n        inputTexture: new Uniform(null),\n        accumulatedTexture: new Uniform(null),\n        normalTexture: new Uniform(null),\n        depthTexture: new Uniform(null),\n        _projectionMatrix: new Uniform(new Matrix4()),\n        _inverseProjectionMatrix: new Uniform(new Matrix4()),\n        cameraMatrixWorld: new Uniform(new Matrix4()),\n        cameraNear: new Uniform(0),\n        cameraFar: new Uniform(0),\n        rayDistance: new Uniform(0),\n        intensity: new Uniform(0),\n        roughnessFade: new Uniform(0),\n        fade: new Uniform(0),\n        thickness: new Uniform(0),\n        ior: new Uniform(0),\n        maxDepthDifference: new Uniform(0),\n        jitter: new Uniform(0),\n        jitterRoughness: new Uniform(0),\n        maxRoughness: new Uniform(0),\n        samples: new Uniform(0),\n        envMap: new Uniform(null),\n        envMapPosition: new Uniform(new Vector3()),\n        envMapSize: new Uniform(new Vector3()),\n        viewMatrix: new Uniform(new Matrix4())\n      },\n      defines: {\n        steps: 20,\n        refineSteps: 5,\n        CUBEUV_TEXEL_WIDTH: 0,\n        CUBEUV_TEXEL_HEIGHT: 0,\n        CUBEUV_MAX_MIP: 0,\n        vWorldPosition: \"worldPos\"\n      },\n      fragmentShader: fragmentShader.replace(\"#include <helperFunctions>\", helperFunctions),\n      vertexShader: vertexShader$1,\n      toneMapped: false,\n      depthWrite: false,\n      depthTest: false\n    });\n  }\n\n}\n\nconst getVisibleChildren = object => {\n  const queue = [object];\n  const objects = [];\n\n  while (queue.length !== 0) {\n    const mesh = queue.shift();\n    if (mesh.material) objects.push(mesh);\n\n    for (const c of mesh.children) {\n      if (c.visible) queue.push(c);\n    }\n  }\n\n  return objects;\n};\nconst generateCubeUVSize = parameters => {\n  const imageHeight = parameters.envMapCubeUVHeight;\n  if (imageHeight === null) return null;\n  const maxMip = Math.log2(imageHeight) - 2;\n  const texelHeight = 1.0 / imageHeight;\n  const texelWidth = 1.0 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));\n  return {\n    texelWidth,\n    texelHeight,\n    maxMip\n  };\n};\nconst setupEnvMap = (reflectionsMaterial, envMap, envMapCubeUVHeight) => {\n  reflectionsMaterial.uniforms.envMap.value = envMap;\n  const envMapCubeUVSize = generateCubeUVSize({\n    envMapCubeUVHeight\n  });\n  reflectionsMaterial.defines.ENVMAP_TYPE_CUBE_UV = \"\";\n  reflectionsMaterial.defines.CUBEUV_TEXEL_WIDTH = envMapCubeUVSize.texelWidth;\n  reflectionsMaterial.defines.CUBEUV_TEXEL_HEIGHT = envMapCubeUVSize.texelHeight;\n  reflectionsMaterial.defines.CUBEUV_MAX_MIP = envMapCubeUVSize.maxMip + \".0\";\n  reflectionsMaterial.needsUpdate = true;\n};\n\nconst isWebGL2Available = () => {\n  try {\n    const canvas = document.createElement(\"canvas\");\n    return !!(window.WebGL2RenderingContext && canvas.getContext(\"webgl2\"));\n  } catch (e) {\n    return false;\n  }\n};\n\nclass ReflectionsPass extends Pass {\n  constructor(ssrEffect, options = {}) {\n    super(\"ReflectionsPass\");\n    this.ssrEffect = void 0;\n    this.cachedMaterials = new WeakMap();\n    this.USE_MRT = false;\n    this.webgl1DepthPass = null;\n    this.visibleMeshes = [];\n    this.ssrEffect = ssrEffect;\n    this._scene = ssrEffect._scene;\n    this._camera = ssrEffect._camera;\n    this.fullscreenMaterial = new ReflectionsMaterial();\n    if (ssrEffect._camera.isPerspectiveCamera) this.fullscreenMaterial.defines.PERSPECTIVE_CAMERA = \"\";\n    const width = options.width || typeof window !== \"undefined\" ? window.innerWidth : 2000;\n    const height = options.height || typeof window !== \"undefined\" ? window.innerHeight : 1000;\n    this.renderTarget = new WebGLRenderTarget(width, height, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      type: HalfFloatType,\n      depthBuffer: false\n    });\n    this.renderPass = new RenderPass(this._scene, this._camera);\n    this.USE_MRT = isWebGL2Available();\n\n    if (this.USE_MRT) {\n      // buffers: normal, depth (2), roughness will be written to the alpha channel of the normal buffer\n      this.gBuffersRenderTarget = new WebGLMultipleRenderTargets(width, height, 2, {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter\n      });\n      this.normalTexture = this.gBuffersRenderTarget.texture[0];\n      this.depthTexture = this.gBuffersRenderTarget.texture[1];\n    } else {\n      // depth pass\n      this.webgl1DepthPass = new DepthPass(this._scene, this._camera);\n      this.webgl1DepthPass.renderTarget.minFilter = LinearFilter;\n      this.webgl1DepthPass.renderTarget.magFilter = LinearFilter;\n      this.webgl1DepthPass.renderTarget.texture.minFilter = LinearFilter;\n      this.webgl1DepthPass.renderTarget.texture.magFilter = LinearFilter;\n      this.webgl1DepthPass.setSize(typeof window !== \"undefined\" ? window.innerWidth : 2000, typeof window !== \"undefined\" ? window.innerHeight : 1000); // render normals (in the rgb channel) and roughness (in the alpha channel) in gBuffersRenderTarget\n\n      this.gBuffersRenderTarget = new WebGLRenderTarget(width, height, {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter\n      });\n      this.normalTexture = this.gBuffersRenderTarget.texture;\n      this.depthTexture = this.webgl1DepthPass.texture;\n    } // set up uniforms\n\n\n    this.fullscreenMaterial.uniforms.normalTexture.value = this.normalTexture;\n    this.fullscreenMaterial.uniforms.depthTexture.value = this.depthTexture;\n    this.fullscreenMaterial.uniforms.accumulatedTexture.value = this.ssrEffect.temporalResolvePass.accumulatedTexture;\n    this.fullscreenMaterial.uniforms.cameraMatrixWorld.value = this._camera.matrixWorld;\n    this.fullscreenMaterial.uniforms._projectionMatrix.value = this._camera.projectionMatrix;\n    this.fullscreenMaterial.uniforms._inverseProjectionMatrix.value = this._camera.projectionMatrixInverse;\n  }\n\n  setSize(width, height) {\n    this.renderTarget.setSize(width * this.ssrEffect.resolutionScale, height * this.ssrEffect.resolutionScale);\n    this.gBuffersRenderTarget.setSize(width * this.ssrEffect.resolutionScale, height * this.ssrEffect.resolutionScale);\n    this.fullscreenMaterial.uniforms.accumulatedTexture.value = this.ssrEffect.temporalResolvePass.accumulatedTexture;\n    this.fullscreenMaterial.needsUpdate = true;\n  }\n\n  dispose() {\n    this.renderTarget.dispose();\n    this.gBuffersRenderTarget.dispose();\n    this.renderPass.dispose();\n    if (!this.USE_MRT) this.webgl1DepthPass.dispose();\n    this.fullscreenMaterial.dispose();\n    this.normalTexture = null;\n    this.depthTexture = null;\n    this.velocityTexture = null;\n  }\n\n  keepMaterialMapUpdated(mrtMaterial, originalMaterial, prop, define) {\n    if (this.ssrEffect[define]) {\n      if (originalMaterial[prop] !== mrtMaterial[prop]) {\n        mrtMaterial[prop] = originalMaterial[prop];\n        mrtMaterial.uniforms[prop].value = originalMaterial[prop];\n\n        if (originalMaterial[prop]) {\n          mrtMaterial.defines[define] = \"\";\n        } else {\n          delete mrtMaterial.defines[define];\n        }\n\n        mrtMaterial.needsUpdate = true;\n      }\n    } else if (mrtMaterial[prop] !== undefined) {\n      mrtMaterial[prop] = undefined;\n      mrtMaterial.uniforms[prop].value = undefined;\n      delete mrtMaterial.defines[define];\n      mrtMaterial.needsUpdate = true;\n    }\n  }\n\n  setMRTMaterialInScene() {\n    this.visibleMeshes = getVisibleChildren(this._scene);\n\n    for (const c of this.visibleMeshes) {\n      if (c.material) {\n        const originalMaterial = c.material;\n        let [cachedOriginalMaterial, mrtMaterial] = this.cachedMaterials.get(c) || [];\n\n        if (originalMaterial !== cachedOriginalMaterial) {\n          if (mrtMaterial) mrtMaterial.dispose();\n          mrtMaterial = new MRTMaterial();\n          if (this.USE_MRT) mrtMaterial.defines.USE_MRT = \"\";\n          mrtMaterial.normalScale = originalMaterial.normalScale;\n          mrtMaterial.uniforms.normalScale.value = originalMaterial.normalScale;\n          const map = originalMaterial.map || originalMaterial.normalMap || originalMaterial.roughnessMap || originalMaterial.metalnessMap;\n          if (map) mrtMaterial.uniforms.uvTransform.value = map.matrix;\n          this.cachedMaterials.set(c, [originalMaterial, mrtMaterial]);\n        } // update the child's MRT material\n\n\n        this.keepMaterialMapUpdated(mrtMaterial, originalMaterial, \"normalMap\", \"useNormalMap\");\n        this.keepMaterialMapUpdated(mrtMaterial, originalMaterial, \"roughnessMap\", \"useRoughnessMap\");\n        mrtMaterial.uniforms.roughness.value = this.ssrEffect.selection.size === 0 || this.ssrEffect.selection.has(c) ? originalMaterial.roughness || 0 : 10e10;\n        c.material = mrtMaterial;\n      }\n    }\n  }\n\n  unsetMRTMaterialInScene() {\n    for (const c of this.visibleMeshes) {\n      var _c$material;\n\n      if (((_c$material = c.material) == null ? void 0 : _c$material.type) === \"MRTMaterial\") {\n        c.visible = true; // set material back to the original one\n\n        const [originalMaterial] = this.cachedMaterials.get(c);\n        c.material = originalMaterial;\n      }\n    }\n  }\n\n  render(renderer, inputBuffer) {\n    this.setMRTMaterialInScene();\n    renderer.setRenderTarget(this.gBuffersRenderTarget);\n    this.renderPass.render(renderer, this.gBuffersRenderTarget);\n    this.unsetMRTMaterialInScene(); // render depth and velocity in seperate passes\n\n    if (!this.USE_MRT) this.webgl1DepthPass.renderPass.render(renderer, this.webgl1DepthPass.renderTarget);\n    this.fullscreenMaterial.uniforms.inputTexture.value = inputBuffer.texture;\n    this.fullscreenMaterial.uniforms.samples.value = this.ssrEffect.temporalResolvePass.samples;\n    this.fullscreenMaterial.uniforms.cameraNear.value = this._camera.near;\n    this.fullscreenMaterial.uniforms.cameraFar.value = this._camera.far;\n    this.fullscreenMaterial.uniforms.viewMatrix.value.copy(this._camera.matrixWorldInverse);\n    renderer.setRenderTarget(this.renderTarget);\n    renderer.render(this.scene, this.camera);\n  }\n\n}\n\n/**\n* Options of the SSR effect\n* @typedef {Object} SSROptions\n* @property {Number} [intensity] intensity of the reflections\n* @property {Number} [exponent] exponent by which reflections will be potentiated when composing the current frame's reflections and the accumulated reflections into a final reflection; higher values will make reflections clearer by highlighting darker spots less\n* @property {Number} [distance] maximum distance a reflection ray can travel to find what it reflects\n* @property {Number} [fade] how much reflections will fade out by distance\n* @property {Number} [roughnessFade] how intense reflections should be on rough spots; a higher value will make reflections fade out quicker on rough spots\n* @property {Number} [thickness] maximum depth difference between a ray and the particular depth at its screen position before refining with binary search; higher values will result in better performance\n* @property {Number} [ior] Index of Refraction, used for calculating fresnel; reflections tend to be more intense the steeper the angle between them and the viewer is, the ior parameter sets how much the intensity varies\n* @property {Number} [maxRoughness] maximum roughness a texel can have to have reflections calculated for it\n* @property {Number} [maxDepthDifference] maximum depth difference between a ray and the particular depth at its screen position after refining with binary search; higher values will result in better performance\n* @property {Number} [blend] a value between 0 and 1 to set how much the last frame's reflections should be blended in; higher values will result in less noisy reflections when moving the camera but a more smeary look\n* @property {boolean} [correction] how much pixels should be corrected when doing temporal resolving; higher values will result in less smearing but more noise\n* @property {boolean} [correctionRadius] how many surrounding pixels will be used for neighborhood clamping; a higher value can reduce noise when moving the camera but will result in less performance\n* @property {Number} [blur] how much the blurred reflections should be mixed with the raw reflections\n* @property {Number} [blurKernel] kernel size of the Box Blur Filter; higher kernel sizes will result in blurrier reflections with more artifacts\n* @property {Number} [blurSharpness] exponent of the Box Blur filter; higher values will result in more sharpness\n* @property {Number} [jitter] how intense jittering should be\n* @property {Number} [jitterRoughness] how intense jittering should be in relation to a material's roughness\n* @property {Number} [steps] number of steps a reflection ray can maximally do to find an object it intersected (and thus reflects)\n* @property {Number} [refineSteps] once we had our ray intersect something, we need to find the exact point in space it intersected and thus it reflects; this can be done through binary search with the given number of maximum steps\n* @property {boolean} [missedRays] if there should still be reflections for rays for which a reflecting point couldn't be found; enabling this will result in stretched looking reflections which can look good or bad depending on the angle\n* @property {boolean} [useNormalMap] if roughness maps should be taken account of when calculating reflections\n* @property {boolean} [useRoughnessMap] if normal maps should be taken account of when calculating reflections\n* @property {Number} [resolutionScale] resolution of the SSR effect, a resolution of 0.5 means the effect will be rendered at half resolution\n* @property {Number} [velocityResolutionScale] resolution of the velocity buffer, a resolution of 0.5 means velocity will be rendered at half resolution\n*/\n\n/**\n * The options of the SSR effect\n * @type {SSROptions}\n */\nconst defaultSSROptions = {\n  intensity: 1,\n  exponent: 1,\n  distance: 10,\n  fade: 0,\n  roughnessFade: 1,\n  thickness: 10,\n  ior: 1.45,\n  maxRoughness: 1,\n  maxDepthDifference: 10,\n  blend: 0.9,\n  correction: 1,\n  correctionRadius: 1,\n  blur: 0.5,\n  blurKernel: 1,\n  blurSharpness: 10,\n  jitter: 0,\n  jitterRoughness: 0,\n  steps: 20,\n  refineSteps: 5,\n  missedRays: true,\n  useNormalMap: true,\n  useRoughnessMap: true,\n  resolutionScale: 1,\n  velocityResolutionScale: 1\n};\n\nvar vertexShader = \"#define GLSLIFY 1\\nvarying vec2 vUv;void main(){vUv=position.xy*0.5+0.5;gl_Position=vec4(position.xy,1.0,1.0);}\"; // eslint-disable-line\n\nvar temporalResolve = \"#define GLSLIFY 1\\nuniform sampler2D inputTexture;uniform sampler2D accumulatedTexture;uniform sampler2D velocityTexture;uniform sampler2D lastVelocityTexture;uniform float blend;uniform float correction;uniform float exponent;uniform float samples;uniform vec2 invTexSize;uniform mat4 curInverseProjectionMatrix;uniform mat4 curCameraMatrixWorld;uniform mat4 prevInverseProjectionMatrix;uniform mat4 prevCameraMatrixWorld;varying vec2 vUv;\\n#define MAX_NEIGHBOR_DEPTH_DIFFERENCE 0.001\\n#define FLOAT_EPSILON 0.00001\\n#define FLOAT_ONE_MINUS_EPSILON 0.99999\\nvec3 transformexponent;vec3 undoColorTransformExponent;vec3 transformColor(vec3 color){if(exponent==1.0)return color;return pow(abs(color),transformexponent);}vec3 undoColorTransform(vec3 color){if(exponent==1.0)return color;return max(pow(abs(color),undoColorTransformExponent),vec3(0.0));}void main(){if(exponent!=1.0){transformexponent=vec3(1.0/exponent);undoColorTransformExponent=vec3(exponent);}vec4 inputTexel=textureLod(inputTexture,vUv,0.0);vec4 accumulatedTexel;vec3 inputColor=transformColor(inputTexel.rgb);vec3 accumulatedColor;float alpha=inputTexel.a;float velocityDisocclusion;bool didReproject=false;\\n#ifdef boxBlur\\nvec3 boxBlurredColor=inputTexel.rgb;\\n#endif\\nvec4 velocity=textureLod(velocityTexture,vUv,0.0);bool isMoving=alpha<1.0||dot(velocity.xy,velocity.xy)>0.0;if(isMoving){vec3 minNeighborColor=inputColor;vec3 maxNeighborColor=inputColor;vec3 col;vec2 neighborUv;vec2 reprojectedUv=vUv-velocity.xy;vec4 lastVelocity=textureLod(lastVelocityTexture,reprojectedUv,0.0);float depth=velocity.b;float closestDepth=depth;float lastClosestDepth=lastVelocity.b;float neighborDepth;float lastNeighborDepth;for(int x=-correctionRadius;x<=correctionRadius;x++){for(int y=-correctionRadius;y<=correctionRadius;y++){if(x!=0||y!=0){neighborUv=vUv+vec2(x,y)*invTexSize;vec4 neigborVelocity=textureLod(velocityTexture,neighborUv,0.0);neighborDepth=neigborVelocity.b;col=textureLod(inputTexture,neighborUv,0.0).xyz;int absX=abs(x);int absY=abs(y);\\n#ifdef dilation\\nif(absX==1&&absY==1){if(neighborDepth>closestDepth){velocity=neigborVelocity;closestDepth=neighborDepth;}vec4 lastNeighborVelocity=textureLod(velocityTexture,vUv+vec2(x,y)*invTexSize,0.0);lastNeighborDepth=lastNeighborVelocity.b;if(neighborDepth>closestDepth){lastVelocity=lastNeighborVelocity;lastClosestDepth=lastNeighborDepth;}}\\n#endif\\nif(abs(depth-neighborDepth)<MAX_NEIGHBOR_DEPTH_DIFFERENCE){\\n#ifdef boxBlur\\nif(absX<=2&&absY<=2)boxBlurredColor+=col;\\n#endif\\ncol=transformColor(col);minNeighborColor=min(col,minNeighborColor);maxNeighborColor=max(col,maxNeighborColor);}}}}float velocityLength=length(lastVelocity.xy-velocity.xy);velocityDisocclusion=(velocityLength-0.000005)*10.0;velocityDisocclusion*=velocityDisocclusion;reprojectedUv=vUv-velocity.xy;\\n#ifdef boxBlur\\nfloat pxRadius=correctionRadius>5 ? 121.0 : pow(float(correctionRadius*2+1),2.0);boxBlurredColor/=pxRadius;boxBlurredColor=transformColor(boxBlurredColor);\\n#endif\\nif(reprojectedUv.x>=0.0&&reprojectedUv.x<=1.0&&reprojectedUv.y>=0.0&&reprojectedUv.y<=1.0){accumulatedTexel=textureLod(accumulatedTexture,reprojectedUv,0.0);accumulatedColor=transformColor(accumulatedTexel.rgb);vec3 clampedColor=clamp(accumulatedColor,minNeighborColor,maxNeighborColor);accumulatedColor=mix(accumulatedColor,clampedColor,correction);didReproject=true;}else{\\n#ifdef boxBlur\\naccumulatedColor=boxBlurredColor;\\n#else\\naccumulatedColor=inputColor;\\n#endif\\n}if(velocity.r>FLOAT_ONE_MINUS_EPSILON&&velocity.g>FLOAT_ONE_MINUS_EPSILON){alpha=0.0;velocityDisocclusion=1.0;}}else{accumulatedColor=transformColor(textureLod(accumulatedTexture,vUv,0.0).rgb);}vec3 outputColor=inputColor;\\n#include <custom_compose_shader>\\ngl_FragColor=vec4(undoColorTransform(outputColor),alpha);}\"; // eslint-disable-line\n\nclass TemporalResolveMaterial extends ShaderMaterial {\n  constructor(customComposeShader) {\n    const fragmentShader = temporalResolve.replace(\"#include <custom_compose_shader>\", customComposeShader);\n    super({\n      type: \"TemporalResolveMaterial\",\n      uniforms: {\n        inputTexture: new Uniform(null),\n        accumulatedTexture: new Uniform(null),\n        velocityTexture: new Uniform(null),\n        lastVelocityTexture: new Uniform(null),\n        samples: new Uniform(1),\n        blend: new Uniform(0.5),\n        correction: new Uniform(1),\n        exponent: new Uniform(1),\n        invTexSize: new Uniform(new Vector2())\n      },\n      defines: {\n        correctionRadius: 1\n      },\n      vertexShader,\n      fragmentShader\n    });\n  }\n\n}\n\n// this shader is from: https://github.com/gkjohnson/threejs-sandbox\n// a second set of bone information from the previou frame\n\nconst prev_skinning_pars_vertex =\n/* glsl */\n`\n\t\t#ifdef USE_SKINNING\n\t\t#ifdef BONE_TEXTURE\n\t\t\tuniform sampler2D prevBoneTexture;\n\t\t\tmat4 getPrevBoneMatrix( const in float i ) {\n\t\t\t\tfloat j = i * 4.0;\n\t\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\t\ty = dy * ( y + 0.5 );\n\t\t\t\tvec4 v1 = texture2D( prevBoneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\t\tvec4 v2 = texture2D( prevBoneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\t\tvec4 v3 = texture2D( prevBoneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\t\tvec4 v4 = texture2D( prevBoneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\t\treturn bone;\n\t\t\t}\n\t\t#else\n\t\t\tuniform mat4 prevBoneMatrices[ MAX_BONES ];\n\t\t\tmat4 getPrevBoneMatrix( const in float i ) {\n\t\t\t\tmat4 bone = prevBoneMatrices[ int(i) ];\n\t\t\t\treturn bone;\n\t\t\t}\n\t\t#endif\n\t\t#endif\n`; // Returns the body of the vertex shader for the velocity buffer and\n// outputs the position of the current and last frame positions\n\nconst velocity_vertex =\n/* glsl */\n`\n\t\tvec3 transformed;\n\n\t\t// Get the normal\n\t\t${ShaderChunk.skinbase_vertex}\n\t\t${ShaderChunk.beginnormal_vertex}\n\t\t${ShaderChunk.skinnormal_vertex}\n\t\t${ShaderChunk.defaultnormal_vertex}\n\n\t\t// Get the current vertex position\n\t\ttransformed = vec3( position );\n\t\t${ShaderChunk.skinning_vertex}\n\t\tnewPosition = velocityMatrix * vec4( transformed, 1.0 );\n\n\t\t// Get the previous vertex position\n\t\ttransformed = vec3( position );\n\t\t${ShaderChunk.skinbase_vertex.replace(/mat4 /g, \"\").replace(/getBoneMatrix/g, \"getPrevBoneMatrix\")}\n\t\t${ShaderChunk.skinning_vertex.replace(/vec4 /g, \"\")}\n\t\tprevPosition = prevVelocityMatrix * vec4( transformed, 1.0 );\n\n\t\tgl_Position = newPosition;\n`;\nclass VelocityMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        prevVelocityMatrix: {\n          value: new Matrix4()\n        },\n        velocityMatrix: {\n          value: new Matrix4()\n        },\n        prevBoneTexture: {\n          value: null\n        },\n        interpolateGeometry: {\n          value: 0\n        },\n        intensity: {\n          value: 1\n        },\n        boneTexture: {\n          value: null\n        },\n        alphaTest: {\n          value: 0.0\n        },\n        map: {\n          value: null\n        },\n        alphaMap: {\n          value: null\n        },\n        opacity: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n                    #define MAX_BONES 1024\n                    \n                    ${ShaderChunk.skinning_pars_vertex}\n                    ${prev_skinning_pars_vertex}\n        \n                    uniform mat4 velocityMatrix;\n                    uniform mat4 prevVelocityMatrix;\n                    uniform float interpolateGeometry;\n                    varying vec4 prevPosition;\n                    varying vec4 newPosition;\n\t\t\t\t\tvarying vec2 vHighPrecisionZW;\n        \n                    void main() {\n        \n                        ${velocity_vertex}\n\n\t\t\t\t\t\tvHighPrecisionZW = gl_Position.zw;\n        \n                    }`,\n      fragmentShader:\n      /* glsl */\n      `\n                    uniform float intensity;\n                    varying vec4 prevPosition;\n                    varying vec4 newPosition;\n\t\t\t\t\tvarying vec2 vHighPrecisionZW;\n        \n                    void main() {\n\t\t\t\t\t\t#ifdef FULL_MOVEMENT\n\t\t\t\t\t\tgl_FragColor = vec4( 1., 1., 1. - gl_FragCoord.z, 0. );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t\t#endif\n\n                        vec2 pos0 = (prevPosition.xy / prevPosition.w) * 0.5 + 0.5;\n                        vec2 pos1 = (newPosition.xy / newPosition.w) * 0.5 + 0.5;\n        \n                        vec2 vel = pos1 - pos0;\n\n\t\t\t\t\t\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n                        \n                        gl_FragColor = vec4( vel, 1. - fragCoordZ, 0. );\n        \n                    }`\n    });\n    this.isVelocityMaterial = true;\n  }\n\n}\n\nconst backgroundColor = new Color(0);\nconst updateProperties = [\"visible\", \"wireframe\", \"side\"];\nclass VelocityPass extends Pass {\n  constructor(scene, camera) {\n    var _window, _window2;\n\n    super(\"VelocityPass\");\n    this.cachedMaterials = new WeakMap();\n    this.lastCameraTransform = {\n      position: new Vector3(),\n      quaternion: new Quaternion()\n    };\n    this.visibleMeshes = [];\n    this.renderedMeshesThisFrame = 0;\n    this.renderedMeshesLastFrame = 0;\n    this._scene = scene;\n    this._camera = camera;\n    this.renderTarget = new WebGLRenderTarget(((_window = window) == null ? void 0 : _window.innerWidth) || 1000, ((_window2 = window) == null ? void 0 : _window2.innerHeight) || 1000, {\n      type: HalfFloatType\n    });\n  }\n\n  setVelocityMaterialInScene() {\n    this.renderedMeshesThisFrame = 0;\n    this.visibleMeshes = getVisibleChildren(this._scene);\n\n    for (const c of this.visibleMeshes) {\n      var _c$skeleton2;\n\n      const originalMaterial = c.material;\n      let [cachedOriginalMaterial, velocityMaterial] = this.cachedMaterials.get(c) || [];\n\n      if (originalMaterial !== cachedOriginalMaterial) {\n        var _c$skeleton;\n\n        velocityMaterial = new VelocityMaterial();\n        velocityMaterial.lastMatrixWorld = new Matrix4();\n        c.material = velocityMaterial;\n        if ((_c$skeleton = c.skeleton) != null && _c$skeleton.boneTexture) this.saveBoneTexture(c);\n        this.cachedMaterials.set(c, [originalMaterial, velocityMaterial]);\n      }\n\n      velocityMaterial.uniforms.velocityMatrix.value.multiplyMatrices(this._camera.projectionMatrix, c.modelViewMatrix);\n\n      if (c.userData.needsUpdatedReflections || originalMaterial.map instanceof VideoTexture) {\n        if (!(\"FULL_MOVEMENT\" in velocityMaterial.defines)) velocityMaterial.needsUpdate = true;\n        velocityMaterial.defines.FULL_MOVEMENT = \"\";\n      } else {\n        if (\"FULL_MOVEMENT\" in velocityMaterial.defines) {\n          delete velocityMaterial.defines.FULL_MOVEMENT;\n          velocityMaterial.needsUpdate = true;\n        }\n      }\n\n      c.visible = this.cameraMovedThisFrame || !c.matrixWorld.equals(velocityMaterial.lastMatrixWorld) || c.skeleton || \"FULL_MOVEMENT\" in velocityMaterial.defines;\n      c.material = velocityMaterial;\n      if (!c.visible) continue;\n      this.renderedMeshesThisFrame++;\n\n      for (const prop of updateProperties) velocityMaterial[prop] = originalMaterial[prop];\n\n      if ((_c$skeleton2 = c.skeleton) != null && _c$skeleton2.boneTexture) {\n        velocityMaterial.defines.USE_SKINNING = \"\";\n        velocityMaterial.defines.BONE_TEXTURE = \"\";\n        velocityMaterial.uniforms.boneTexture.value = c.skeleton.boneTexture;\n      }\n    }\n  }\n\n  saveBoneTexture(object) {\n    let boneTexture = object.material.uniforms.prevBoneTexture.value;\n\n    if (boneTexture && boneTexture.image.width === object.skeleton.boneTexture.width) {\n      boneTexture = object.material.uniforms.prevBoneTexture.value;\n      boneTexture.image.data.set(object.skeleton.boneTexture.image.data);\n    } else {\n      var _boneTexture;\n\n      (_boneTexture = boneTexture) == null ? void 0 : _boneTexture.dispose();\n      const boneMatrices = object.skeleton.boneTexture.image.data.slice();\n      const size = object.skeleton.boneTexture.image.width;\n      boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n      object.material.uniforms.prevBoneTexture.value = boneTexture;\n      boneTexture.needsUpdate = true;\n    }\n  }\n\n  unsetVelocityMaterialInScene() {\n    for (const c of this.visibleMeshes) {\n      if (c.material.isVelocityMaterial) {\n        var _c$skeleton3;\n\n        c.visible = true;\n        c.material.lastMatrixWorld.copy(c.matrixWorld);\n        c.material.uniforms.prevVelocityMatrix.value.multiplyMatrices(this._camera.projectionMatrix, c.modelViewMatrix);\n        if ((_c$skeleton3 = c.skeleton) != null && _c$skeleton3.boneTexture) this.saveBoneTexture(c);\n        c.material = this.cachedMaterials.get(c)[0];\n      }\n    }\n  }\n\n  setSize(width, height) {\n    this.renderTarget.setSize(width, height);\n  }\n\n  renderVelocity(renderer) {\n    renderer.setRenderTarget(this.renderTarget);\n\n    if (this.renderedMeshesThisFrame > 0) {\n      const {\n        background\n      } = this._scene;\n      this._scene.background = backgroundColor;\n      renderer.render(this._scene, this._camera);\n      this._scene.background = background;\n    } else {\n      renderer.clearColor();\n    }\n  }\n\n  checkCameraMoved() {\n    const moveDist = this.lastCameraTransform.position.distanceToSquared(this._camera.position);\n    const rotateDist = 8 * (1 - this.lastCameraTransform.quaternion.dot(this._camera.quaternion));\n\n    if (moveDist > 0.000001 || rotateDist > 0.000001) {\n      this.lastCameraTransform.position.copy(this._camera.position);\n      this.lastCameraTransform.quaternion.copy(this._camera.quaternion);\n      return true;\n    }\n\n    return false;\n  }\n\n  render(renderer) {\n    this.cameraMovedThisFrame = this.checkCameraMoved();\n    this.setVelocityMaterialInScene();\n    if (this.renderedMeshesThisFrame > 0 || this.renderedMeshesLastFrame > 0) this.renderVelocity(renderer);\n    this.unsetVelocityMaterialInScene();\n    this.renderedMeshesLastFrame = this.renderedMeshesThisFrame;\n  }\n\n}\n\nconst zeroVec2 = new Vector2(); // the following variables can be accessed by the custom compose shader:\n// \"inputTexel\", \"accumulatedTexel\", \"inputColor\", \"accumulatedColor\", \"alpha\", \"velocityDisocclusion\", \"didReproject\", \"boxBlurredColor\" (if using box blur)\n// the custom compose shader will write the final color to the variable \"outputColor\"\n\nclass TemporalResolvePass extends Pass {\n  constructor(scene, camera, customComposeShader, options = {}) {\n    super(\"TemporalResolvePass\");\n    this.velocityPass = null;\n    this.velocityResolutionScale = 1;\n    this.samples = 1;\n    this.lastCameraTransform = {\n      position: new Vector3(),\n      quaternion: new Quaternion()\n    };\n    this._scene = scene;\n    this._camera = camera;\n    this.renderTarget = new WebGLRenderTarget(1, 1, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      type: HalfFloatType,\n      depthBuffer: false\n    });\n    this.velocityPass = new VelocityPass(scene, camera);\n    this.fullscreenMaterial = new TemporalResolveMaterial(customComposeShader);\n    this.fullscreenMaterial.defines.correctionRadius = options.correctionRadius || 1;\n    if (options.dilation) this.fullscreenMaterial.defines.dilation = \"\";\n    if (options.boxBlur) this.fullscreenMaterial.defines.boxBlur = \"\";\n    this.setupFramebuffers(1, 1);\n    this.checkCanUseSharedVelocityTexture();\n  }\n\n  dispose() {\n    if (this._scene.userData.velocityTexture === this.velocityPass.renderTarget.texture) {\n      delete this._scene.userData.velocityTexture;\n      delete this._scene.userData.lastVelocityTexture;\n    }\n\n    this.renderTarget.dispose();\n    this.accumulatedTexture.dispose();\n    this.fullscreenMaterial.dispose();\n    this.velocityPass.dispose();\n  }\n\n  setSize(width, height) {\n    this.renderTarget.setSize(width, height);\n    this.velocityPass.setSize(width * this.velocityResolutionScale, height * this.velocityResolutionScale);\n    this.velocityPass.renderTarget.texture.minFilter = this.velocityResolutionScale === 1 ? NearestFilter : LinearFilter;\n    this.velocityPass.renderTarget.texture.magFilter = this.velocityResolutionScale === 1 ? NearestFilter : LinearFilter;\n    this.velocityPass.renderTarget.texture.needsUpdate = true;\n    this.fullscreenMaterial.uniforms.invTexSize.value.set(1 / width, 1 / height);\n    this.setupFramebuffers(width, height);\n  }\n\n  setupFramebuffers(width, height) {\n    if (this.accumulatedTexture) this.accumulatedTexture.dispose();\n    if (this.lastVelocityTexture) this.lastVelocityTexture.dispose();\n    this.accumulatedTexture = new FramebufferTexture(width, height, RGBAFormat);\n    this.accumulatedTexture.minFilter = LinearFilter;\n    this.accumulatedTexture.magFilter = LinearFilter;\n    this.accumulatedTexture.type = HalfFloatType;\n    this.lastVelocityTexture = new FramebufferTexture(width * this.velocityResolutionScale, height * this.velocityResolutionScale, RGBAFormat);\n    this.lastVelocityTexture.minFilter = this.velocityResolutionScale === 1 ? NearestFilter : LinearFilter;\n    this.lastVelocityTexture.magFilter = this.velocityResolutionScale === 1 ? NearestFilter : LinearFilter;\n    this.lastVelocityTexture.type = HalfFloatType;\n    this.fullscreenMaterial.uniforms.accumulatedTexture.value = this.accumulatedTexture;\n    this.fullscreenMaterial.uniforms.lastVelocityTexture.value = this.lastVelocityTexture;\n    this.fullscreenMaterial.needsUpdate = true;\n  }\n\n  checkCanUseSharedVelocityTexture() {\n    const canUseSharedVelocityTexture = this._scene.userData.velocityTexture && this.velocityPass.renderTarget.texture !== this._scene.userData.velocityTexture;\n\n    if (canUseSharedVelocityTexture) {\n      // let's use the shared one instead\n      if (this.velocityPass.renderTarget.texture === this.fullscreenMaterial.uniforms.velocityTexture.value) {\n        this.fullscreenMaterial.uniforms.lastVelocityTexture.value = this._scene.userData.lastVelocityTexture;\n        this.fullscreenMaterial.uniforms.velocityTexture.value = this._scene.userData.velocityTexture;\n        this.fullscreenMaterial.needsUpdate = true;\n      }\n    } else {\n      // let's stop using the shared one (if used) and mark ours as the shared one instead\n      if (this.velocityPass.renderTarget.texture !== this.fullscreenMaterial.uniforms.velocityTexture.value) {\n        this.fullscreenMaterial.uniforms.velocityTexture.value = this.velocityPass.renderTarget.texture;\n        this.fullscreenMaterial.uniforms.lastVelocityTexture.value = this.lastVelocityTexture;\n        this.fullscreenMaterial.needsUpdate = true;\n\n        if (!this._scene.userData.velocityTexture) {\n          this._scene.userData.velocityTexture = this.velocityPass.renderTarget.texture;\n          this._scene.userData.lastVelocityTexture = this.lastVelocityTexture;\n        }\n      }\n    }\n\n    return this.velocityPass.renderTarget.texture !== this.fullscreenMaterial.uniforms.velocityTexture.value;\n  }\n\n  checkNeedsResample() {\n    const moveDist = this.lastCameraTransform.position.distanceToSquared(this._camera.position);\n    const rotateDist = 8 * (1 - this.lastCameraTransform.quaternion.dot(this._camera.quaternion));\n\n    if (moveDist > 0.000001 || rotateDist > 0.000001) {\n      this.samples = 1;\n      this.lastCameraTransform.position.copy(this._camera.position);\n      this.lastCameraTransform.quaternion.copy(this._camera.quaternion);\n    }\n  }\n\n  render(renderer) {\n    this.samples++;\n    this.checkNeedsResample();\n    this.fullscreenMaterial.uniforms.samples.value = this.samples; // const isUsingSharedVelocityTexture = this.checkCanUseSharedVelocityTexture()\n    // if (!isUsingSharedVelocityTexture) this.velocityPass.render(renderer)\n\n    renderer.setRenderTarget(this.renderTarget);\n    renderer.render(this.scene, this.camera); // save the render target's texture for use in next frame\n\n    renderer.copyFramebufferToTexture(zeroVec2, this.accumulatedTexture);\n    renderer.setRenderTarget(this.velocityPass.renderTarget);\n    renderer.copyFramebufferToTexture(zeroVec2, this.lastVelocityTexture);\n  }\n\n}\n\n// source: https://observablehq.com/@jrus/halton\nconst halton = function halton(index, base) {\n  let fraction = 1;\n  let result = 0;\n\n  while (index > 0) {\n    fraction /= base;\n    result += fraction * (index % base);\n    index = ~~(index / base); // floor division\n  }\n\n  return result;\n}; // generates Halton tuples in the range [-0.5:0.5]\n\n\nconst generateHalton23Points = count => {\n  const data = [];\n  let i = 1;\n  const end = i + count;\n\n  for (; i < end; i++) {\n    data.push([halton(i, 2) - 0.5, halton(i, 3) - 0.5]);\n  }\n\n  return data;\n};\n\n/* eslint-disable camelcase */\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n} // credits for the box-projecting shader code go to codercat (https://codercat.tk)\n\n\nconst worldposReplace =\n/* glsl */\n`\n#if defined( USE_ENVMAP ) || defined(  ) || defined ( USE_SHADOWMAP )\n    vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\n    #ifdef BOX_PROJECTED_ENV_MAP\n        vWorldPosition = worldPosition.xyz;\n    #endif\n#endif\n`;\nconst boxProjectDefinitions =\n/* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n    uniform vec3 envMapSize;\n    uniform vec3 envMapPosition;\n    varying vec3 vWorldPosition;\n    \n    vec3 parallaxCorrectNormal( vec3 v, vec3 cubeSize, vec3 cubePos ) {\n        vec3 nDir = normalize( v );\n\n        vec3 rbmax = ( .5 * cubeSize + cubePos - vWorldPosition ) / nDir;\n        vec3 rbmin = ( -.5 * cubeSize + cubePos - vWorldPosition ) / nDir;\n\n        vec3 rbminmax;\n\n        rbminmax.x = ( nDir.x > 0. ) ? rbmax.x : rbmin.x;\n        rbminmax.y = ( nDir.y > 0. ) ? rbmax.y : rbmin.y;\n        rbminmax.z = ( nDir.z > 0. ) ? rbmax.z : rbmin.z;\n\n        float correction = min( min( rbminmax.x, rbminmax.y ), rbminmax.z );\n        vec3 boxIntersection = vWorldPosition + nDir * correction;\n        \n        return boxIntersection - cubePos;\n    }\n#endif\n`; // will be inserted after \"vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\"\n\nconst getIBLIrradiance_patch =\n/* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n    worldNormal = parallaxCorrectNormal( worldNormal, envMapSize, envMapPosition );\n#endif\n`; // will be inserted after \"reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\"\n\nconst getIBLRadiance_patch =\n/* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n    reflectVec = parallaxCorrectNormal( reflectVec, envMapSize, envMapPosition );\n#endif\n`;\nfunction useBoxProjectedEnvMap(shader, envMapPosition, envMapSize) {\n  // defines\n  shader.defines.BOX_PROJECTED_ENV_MAP = \"\"; // uniforms\n\n  shader.uniforms.envMapPosition = {\n    value: envMapPosition\n  };\n  shader.uniforms.envMapSize = {\n    value: envMapSize\n  };\n  const line1 = new RegExp(escapeRegExp(\"vec3 worldNormal = inverseTransformDirection ( normal , viewMatrix ) ;\").replaceAll(\" \", \"\\\\s*\"), \"g\");\n  const line2 = new RegExp(escapeRegExp(\"reflectVec = inverseTransformDirection ( reflectVec , viewMatrix ) ;\").replaceAll(\" \", \"\\\\s*\"), \"g\"); // vertex shader\n\n  shader.vertexShader = \"varying vec3 vWorldPosition;\\n\" + shader.vertexShader.replace(\"#include <worldpos_vertex>\", worldposReplace); // fragment shader\n\n  shader.fragmentShader = boxProjectDefinitions + \"\\n\" + shader.fragmentShader.replace(\"#include <envmap_physical_pars_fragment>\", ShaderChunk.envmap_physical_pars_fragment).replace(line1, `vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n                ${getIBLIrradiance_patch}`).replace(line2, `reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n                ${getIBLRadiance_patch}`);\n}\n\nconst finalFragmentShader = finalSSRShader.replace(\"#include <helperFunctions>\", helperFunctions).replace(\"#include <boxBlur>\", boxBlur); // all the properties for which we don't have to resample\n\nconst noResetSamplesProperties = [\"blur\", \"blurSharpness\", \"blurKernel\"];\nconst defaultCubeRenderTarget = new WebGLCubeRenderTarget(1);\nlet pmremGenerator;\nclass SSREffect extends Effect {\n  /**\n   * @param {THREE.Scene} scene The scene of the SSR effect\n   * @param {THREE.Camera} camera The camera with which SSR is being rendered\n   * @param {SSROptions} [options] The optional options for the SSR effect\n   */\n  constructor(scene, camera, options = defaultSSROptions) {\n    super(\"SSREffect\", finalFragmentShader, {\n      type: \"FinalSSRMaterial\",\n      uniforms: new Map([[\"reflectionsTexture\", new Uniform(null)], [\"blur\", new Uniform(0)], [\"blurSharpness\", new Uniform(0)], [\"blurKernel\", new Uniform(0)]]),\n      defines: new Map([[\"RENDER_MODE\", \"0\"]])\n    });\n    this.haltonSequence = generateHalton23Points(1024);\n    this.haltonIndex = 0;\n    this.selection = new Selection();\n    this.lastSize = void 0;\n    this.cubeCamera = new CubeCamera(0.001, 1000, defaultCubeRenderTarget);\n    this.usingBoxProjectedEnvMap = false;\n    this._scene = scene;\n    this._camera = camera;\n    const trOptions = {\n      boxBlur: true,\n      dilation: true\n    };\n    options = _extends({}, defaultSSROptions, options, trOptions); // set up passes\n    // temporal resolve pass\n\n    this.temporalResolvePass = new TemporalResolvePass(scene, camera, trCompose, options);\n    this.uniforms.get(\"reflectionsTexture\").value = this.temporalResolvePass.renderTarget.texture; // reflections pass\n\n    this.reflectionsPass = new ReflectionsPass(this, options);\n    this.temporalResolvePass.fullscreenMaterial.uniforms.inputTexture.value = this.reflectionsPass.renderTarget.texture;\n    this.lastSize = {\n      width: options.width,\n      height: options.height,\n      resolutionScale: options.resolutionScale,\n      velocityResolutionScale: options.velocityResolutionScale\n    };\n    this.setSize(options.width, options.height);\n    this.makeOptionsReactive(options);\n  }\n\n  makeOptionsReactive(options) {\n    let needsUpdate = false;\n    const reflectionPassFullscreenMaterialUniforms = this.reflectionsPass.fullscreenMaterial.uniforms;\n    const reflectionPassFullscreenMaterialUniformsKeys = Object.keys(reflectionPassFullscreenMaterialUniforms);\n\n    for (const key of Object.keys(options)) {\n      Object.defineProperty(this, key, {\n        get() {\n          return options[key];\n        },\n\n        set(value) {\n          if (options[key] === value && needsUpdate) return;\n          options[key] = value;\n\n          if (!noResetSamplesProperties.includes(key)) {\n            this.setSize(this.lastSize.width, this.lastSize.height, true);\n          }\n\n          switch (key) {\n            case \"resolutionScale\":\n              this.setSize(this.lastSize.width, this.lastSize.height);\n              break;\n\n            case \"velocityResolutionScale\":\n              this.temporalResolvePass.velocityResolutionScale = value;\n              this.setSize(this.lastSize.width, this.lastSize.height, true);\n              break;\n\n            case \"blur\":\n              this.uniforms.get(\"blur\").value = value;\n              break;\n\n            case \"blurSharpness\":\n              this.uniforms.get(\"blurSharpness\").value = value;\n              break;\n\n            case \"blurKernel\":\n              this.uniforms.get(\"blurKernel\").value = value;\n              break;\n            // defines\n\n            case \"steps\":\n              this.reflectionsPass.fullscreenMaterial.defines.steps = parseInt(value);\n              this.reflectionsPass.fullscreenMaterial.needsUpdate = needsUpdate;\n              break;\n\n            case \"refineSteps\":\n              this.reflectionsPass.fullscreenMaterial.defines.refineSteps = parseInt(value);\n              this.reflectionsPass.fullscreenMaterial.needsUpdate = needsUpdate;\n              break;\n\n            case \"missedRays\":\n              if (value) {\n                this.reflectionsPass.fullscreenMaterial.defines.missedRays = \"\";\n              } else {\n                delete this.reflectionsPass.fullscreenMaterial.defines.missedRays;\n              }\n\n              this.reflectionsPass.fullscreenMaterial.needsUpdate = needsUpdate;\n              break;\n\n            case \"correctionRadius\":\n              this.temporalResolvePass.fullscreenMaterial.defines.correctionRadius = Math.round(value);\n              this.temporalResolvePass.fullscreenMaterial.needsUpdate = needsUpdate;\n              break;\n\n            case \"blend\":\n              this.temporalResolvePass.fullscreenMaterial.uniforms.blend.value = value;\n              break;\n\n            case \"correction\":\n              this.temporalResolvePass.fullscreenMaterial.uniforms.correction.value = value;\n              break;\n\n            case \"exponent\":\n              this.temporalResolvePass.fullscreenMaterial.uniforms.exponent.value = value;\n              break;\n\n            case \"distance\":\n              reflectionPassFullscreenMaterialUniforms.rayDistance.value = value;\n            // must be a uniform\n\n            default:\n              if (reflectionPassFullscreenMaterialUniformsKeys.includes(key)) {\n                reflectionPassFullscreenMaterialUniforms[key].value = value;\n              }\n\n          }\n        }\n\n      }); // apply all uniforms and defines\n\n      this[key] = options[key];\n    }\n\n    needsUpdate = true;\n  }\n\n  setSize(width, height, force = false) {\n    if (!force && width === this.lastSize.width && height === this.lastSize.height && this.resolutionScale === this.lastSize.resolutionScale && this.velocityResolutionScale === this.lastSize.velocityResolutionScale) return;\n    this.temporalResolvePass.setSize(width, height);\n    this.reflectionsPass.setSize(width, height);\n    this.lastSize = {\n      width,\n      height,\n      resolutionScale: this.resolutionScale,\n      velocityResolutionScale: this.velocityResolutionScale\n    };\n  }\n\n  generateBoxProjectedEnvMapFallback(renderer, position = new Vector3(), size = new Vector3(), envMapSize = 512) {\n    this.cubeCamera.renderTarget.dispose();\n    this.cubeCamera.renderTarget = new WebGLCubeRenderTarget(envMapSize);\n    this.cubeCamera.position.copy(position);\n    this.cubeCamera.updateMatrixWorld();\n    this.cubeCamera.update(renderer, this._scene);\n\n    if (!pmremGenerator) {\n      pmremGenerator = new PMREMGenerator(renderer);\n      pmremGenerator.compileCubemapShader();\n    }\n\n    const envMap = pmremGenerator.fromCubemap(this.cubeCamera.renderTarget.texture).texture;\n    envMap.minFilter = LinearFilter;\n    envMap.magFilter = LinearFilter;\n    const reflectionsMaterial = this.reflectionsPass.fullscreenMaterial;\n    useBoxProjectedEnvMap(reflectionsMaterial, position, size);\n    reflectionsMaterial.fragmentShader = reflectionsMaterial.fragmentShader.replace(\"vec3 worldPos\", \"worldPos\").replace(\"varying vec3 vWorldPosition;\", \"vec3 worldPos;\");\n    reflectionsMaterial.uniforms.envMapPosition.value.copy(position);\n    reflectionsMaterial.uniforms.envMapSize.value.copy(size);\n    setupEnvMap(reflectionsMaterial, envMap, envMapSize);\n    this.usingBoxProjectedEnvMap = true;\n    return envMap;\n  }\n\n  setIBLRadiance(iblRadiance, renderer) {\n    this._scene.traverse(c => {\n      if (c.material) {\n        var _renderer$properties$;\n\n        const uniforms = (_renderer$properties$ = renderer.properties.get(c.material)) == null ? void 0 : _renderer$properties$.uniforms;\n\n        if (uniforms && \"disableIBLRadiance\" in uniforms) {\n          uniforms.disableIBLRadiance.value = iblRadiance;\n        }\n      }\n    });\n  }\n\n  deleteBoxProjectedEnvMapFallback() {\n    const reflectionsMaterial = this.reflectionsPass.fullscreenMaterial;\n    reflectionsMaterial.uniforms.envMap.value = null;\n    reflectionsMaterial.fragmentShader = reflectionsMaterial.fragmentShader.replace(\"worldPos = \", \"vec3 worldPos = \");\n    delete reflectionsMaterial.defines.BOX_PROJECTED_ENV_MAP;\n    reflectionsMaterial.needsUpdate = true;\n    this.usingBoxProjectedEnvMap = false;\n  }\n\n  dispose() {\n    super.dispose();\n    this.reflectionsPass.dispose();\n    this.temporalResolvePass.dispose();\n  }\n\n  update(renderer, inputBuffer) {\n    if (!this.usingBoxProjectedEnvMap && this._scene.environment) {\n      const reflectionsMaterial = this.reflectionsPass.fullscreenMaterial;\n      let envMap = null; // not sure if there is a cleaner way to find the internal texture of a CubeTexture (when used as scene environment)\n\n      this._scene.traverse(c => {\n        if (!envMap && c.material && !c.material.envMap) {\n          const properties = renderer.properties.get(c.material);\n          if (\"envMap\" in properties && properties.envMap instanceof Texture) envMap = properties.envMap;\n        }\n      });\n\n      if (envMap) {\n        const envMapCubeUVHeight = this._scene.environment.image.height;\n        setupEnvMap(reflectionsMaterial, envMap, envMapCubeUVHeight);\n      }\n    }\n\n    this.haltonIndex = (this.haltonIndex + 1) % this.haltonSequence.length;\n    const [x, y] = this.haltonSequence[this.haltonIndex];\n    const {\n      width,\n      height\n    } = this.lastSize;\n    this.temporalResolvePass.velocityPass.render(renderer); // jittering the view offset each frame reduces aliasing for the reflection\n\n    if (this._camera.setViewOffset) this._camera.setViewOffset(width, height, x, y, width, height); // render reflections of current frame\n\n    this.reflectionsPass.render(renderer, inputBuffer); // compose reflection of last and current frame into one reflection\n\n    this.temporalResolvePass.render(renderer);\n\n    this._camera.clearViewOffset();\n  }\n\n  static patchDirectEnvIntensity(envMapIntensity = 0) {\n    if (envMapIntensity === 0) {\n      ShaderChunk.envmap_physical_pars_fragment = ShaderChunk.envmap_physical_pars_fragment.replace(\"vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\", \"vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) { return vec3(0.0);\");\n    } else {\n      ShaderChunk.envmap_physical_pars_fragment = ShaderChunk.envmap_physical_pars_fragment.replace(\"vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\", \"vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness ) * \" + envMapIntensity.toFixed(5) + \";\");\n    }\n  }\n\n}\n\nexport { SSREffect, defaultSSROptions };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}