{"ast":null,"code":"export const createIsSupportedPromise = window => {\n  if (window !== null && // Bug #14: Before v14.1 Safari did not support the BlobEvent.\n  window.BlobEvent !== undefined && window.MediaStream !== undefined && (\n  /*\n   * Bug #10: An early experimental implemenation in Safari did not provide the isTypeSupported() function.\n   */\n  window.MediaRecorder === undefined || window.MediaRecorder.isTypeSupported !== undefined)) {\n    /*\n     * Bug #5: Up until v70 Firefox did emit a blob of type video/webm when asked to encode a MediaStream with a video track into an\n     * audio codec.\n     */\n    return new Promise(resolve => {\n      // Bug #11 Safari does not yet support the MediaRecorder but that isn't tested here.\n      if (window.MediaRecorder === undefined) {\n        return resolve(true);\n      }\n\n      const canvasElement = window.document.createElement('canvas'); // @todo https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n\n      canvasElement.getContext('2d');\n\n      if (typeof canvasElement.captureStream !== 'function') {\n        return resolve(false);\n      }\n\n      const mediaStream = canvasElement.captureStream();\n      const mimeType = 'audio/webm';\n\n      try {\n        const mediaRecorder = new window.MediaRecorder(mediaStream, {\n          mimeType\n        });\n        mediaRecorder.addEventListener('dataavailable', _ref => {\n          let {\n            data\n          } = _ref;\n          return resolve(data.type === mimeType);\n        });\n        mediaRecorder.start();\n        setTimeout(() => mediaRecorder.stop(), 10);\n      } catch (err) {\n        resolve(err.name === 'NotSupportedError');\n      }\n    });\n  }\n\n  return Promise.resolve(false);\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,wBAAwB,GAAgCC,MAAD,IAAW;EAC3E,IACIA,MAAM,KAAK,IAAX,IACA;EACAA,MAAM,CAACC,SAAP,KAAqBC,SAFrB,IAGAF,MAAM,CAACG,WAAP,KAAuBD,SAHvB;EAIA;;;EAGCF,MAAM,CAACI,aAAP,KAAyBF,SAAzB,IAAsCF,MAAM,CAACI,aAAP,CAAqBC,eAArB,KAAyCH,SAPhF,CADJ,EASE;IACE;;;;IAIA,OAAO,IAAII,OAAJ,CAAaC,OAAD,IAAY;MAC3B;MACA,IAAIP,MAAM,CAACI,aAAP,KAAyBF,SAA7B,EAAwC;QACpC,OAAOK,OAAO,CAAC,IAAD,CAAd;MACH;;MAED,MAAMC,aAAa,GAA0DR,MAAM,CAACS,QAAP,CAAgBC,aAAhB,CAA8B,QAA9B,CAA7E,CAN2B,CAQ3B;;MACAF,aAAa,CAACG,UAAd,CAAyB,IAAzB;;MAEA,IAAI,OAAOH,aAAa,CAACI,aAArB,KAAuC,UAA3C,EAAuD;QACnD,OAAOL,OAAO,CAAC,KAAD,CAAd;MACH;;MAED,MAAMM,WAAW,GAAGL,aAAa,CAACI,aAAd,EAApB;MACA,MAAME,QAAQ,GAAG,YAAjB;;MAEA,IAAI;QACA,MAAMC,aAAa,GAAG,IAAIf,MAAM,CAACI,aAAX,CAAyBS,WAAzB,EAAsC;UAAEC;QAAF,CAAtC,CAAtB;QAEAC,aAAa,CAACC,gBAAd,CAA+B,eAA/B,EAAgD;UAAA,IAAC;YAAEC;UAAF,CAAD;UAAA,OAAcV,OAAO,CAACU,IAAI,CAACC,IAAL,KAAcJ,QAAf,CAArB;QAAA,CAAhD;QACAC,aAAa,CAACI,KAAd;QAEAC,UAAU,CAAC,MAAML,aAAa,CAACM,IAAd,EAAP,EAA6B,EAA7B,CAAV;MACH,CAPD,CAOE,OAAOC,GAAP,EAAY;QACVf,OAAO,CAACe,GAAG,CAACC,IAAJ,KAAa,mBAAd,CAAP;MACH;IACJ,CA5BM,CAAP;EA6BH;;EAED,OAAOjB,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACH,CA/CM","names":["createIsSupportedPromise","window","BlobEvent","undefined","MediaStream","MediaRecorder","isTypeSupported","Promise","resolve","canvasElement","document","createElement","getContext","captureStream","mediaStream","mimeType","mediaRecorder","addEventListener","data","type","start","setTimeout","stop","err","name"],"sources":["C:\\Users\\user\\Desktop\\GIRINEE\\S07P22A202\\frontend\\node_modules\\extendable-media-recorder\\src\\factories\\is-supported-promise.ts"],"sourcesContent":["import { TIsSupportedPromiseFactory } from '../types';\n\nexport const createIsSupportedPromise: TIsSupportedPromiseFactory = (window) => {\n    if (\n        window !== null &&\n        // Bug #14: Before v14.1 Safari did not support the BlobEvent.\n        window.BlobEvent !== undefined &&\n        window.MediaStream !== undefined &&\n        /*\n         * Bug #10: An early experimental implemenation in Safari did not provide the isTypeSupported() function.\n         */\n        (window.MediaRecorder === undefined || window.MediaRecorder.isTypeSupported !== undefined)\n    ) {\n        /*\n         * Bug #5: Up until v70 Firefox did emit a blob of type video/webm when asked to encode a MediaStream with a video track into an\n         * audio codec.\n         */\n        return new Promise((resolve) => {\n            // Bug #11 Safari does not yet support the MediaRecorder but that isn't tested here.\n            if (window.MediaRecorder === undefined) {\n                return resolve(true);\n            }\n\n            const canvasElement: HTMLCanvasElement & { captureStream?(): MediaStream } = window.document.createElement('canvas');\n\n            // @todo https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n            canvasElement.getContext('2d');\n\n            if (typeof canvasElement.captureStream !== 'function') {\n                return resolve(false);\n            }\n\n            const mediaStream = canvasElement.captureStream();\n            const mimeType = 'audio/webm';\n\n            try {\n                const mediaRecorder = new window.MediaRecorder(mediaStream, { mimeType });\n\n                mediaRecorder.addEventListener('dataavailable', ({ data }) => resolve(data.type === mimeType));\n                mediaRecorder.start();\n\n                setTimeout(() => mediaRecorder.stop(), 10);\n            } catch (err) {\n                resolve(err.name === 'NotSupportedError');\n            }\n        });\n    }\n\n    return Promise.resolve(false);\n};\n"]},"metadata":{},"sourceType":"module"}